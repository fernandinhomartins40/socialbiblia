name: 🚀 Deploy Social Bíblia to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/opt/socialbiblia'
  COMPOSE_PROJECT_NAME: 'socialbiblia'

jobs:
  # ====================================
  # JOB 1: VALIDAÇÃO E BUILD LOCAL
  # ====================================
  validate-and-build:
    name: 🔍 Validate & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/backend/package-lock.json

      - name: 🔍 Verify project structure
        run: |
          echo "🔍 Verificando estrutura do projeto..."
          
          # Arquivos obrigatórios para o novo setup
          REQUIRED_FILES=(
            "docker-compose.new.yml"
            "apps/backend/package.json"
            "apps/backend/tsconfig.json"
            "apps/backend/prisma/schema.prisma"
            "apps/backend/src/app.ts"
            "apps/web/package.json"
            "apps/web/vite.config.ts"
            "configs/docker/Dockerfile.backend"
            "configs/docker/Dockerfile.web"
            ".env.production"
            "scripts/deploy-vps.sh"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Estrutura do projeto validada"

      - name: 🏗️ Install Root Dependencies  
        run: |
          echo "📦 Instalando dependências do monorepo..."
          npm ci --ignore-scripts --no-fund --no-audit
          echo "✅ Dependências do monorepo instaladas"

      - name: 🏗️ Install Backend Dependencies
        run: |
          echo "📦 Instalando dependências do backend..."
          cd apps/backend
          npm ci --ignore-scripts --no-fund --no-audit
          echo "✅ Dependências do backend instaladas"

      - name: 🔧 Generate Prisma Client
        run: |
          echo "🗃️ Gerando cliente Prisma..."
          cd apps/backend
          npx prisma generate
          echo "✅ Cliente Prisma gerado"

      - name: 🏗️ Build Backend
        run: |
          echo "🔨 Fazendo build do backend..."
          cd apps/backend
          npm run build
          npm run copyfiles
          echo "✅ Build do backend concluído"

      - name: 🏗️ Install Frontend Dependencies
        run: |
          echo "📦 Instalando dependências do frontend..."
          cd apps/web
          # Complete clean start for Rollup optional dependencies
          rm -rf node_modules package-lock.json 2>/dev/null || true
          # Clear npm cache to avoid corrupted optional dependencies
          npm cache clean --force 2>/dev/null || true
          # Install dependencies with explicit platform support
          PLATFORM=$(node -e "console.log(process.platform)")
          ARCH=$(node -e "console.log(process.arch)")
          echo "Detecting platform: $PLATFORM-$ARCH"
          
          # Install base dependencies first
          npm install --no-fund --no-audit --prefer-dedupe
          
          # Force install Rollup platform-specific binary
          if [ "$PLATFORM" = "linux" ] && [ "$ARCH" = "x64" ]; then
            echo "Installing Linux x64 specific Rollup binary..."
            npm install @rollup/rollup-linux-x64-gnu --save-optional --no-fund --no-audit || {
              echo "Direct install failed, trying with legacy peer deps..."
              npm install @rollup/rollup-linux-x64-gnu --save-optional --legacy-peer-deps --no-fund --no-audit || true
            }
          fi
          
          # Rebuild native modules to ensure binaries are linked correctly
          npm rebuild --no-fund --no-audit || true
          
          # Verify Rollup installation
          echo "Verifying Rollup installation..."
          npx rollup --version || {
            echo "Rollup verification failed, forcing complete reinstall..."
            rm -rf node_modules
            npm install --no-fund --no-audit
            npm install @rollup/rollup-linux-x64-gnu --save-optional --force || true
          }
          
          echo "✅ Dependências do frontend instaladas com suporte completo Rollup"

      - name: 🏗️ Build Frontend
        run: |
          echo "🔨 Fazendo build do frontend..."
          cd apps/web
          
          # Final verification before build
          echo "Verificando dependências críticas antes do build..."
          node -e "
            try {
              const rollup = require('rollup');
              console.log('✅ Rollup core module encontrado');
            } catch (e) {
              console.error('❌ Rollup core module não encontrado:', e.message);
              process.exit(1);
            }
          " || {
            echo "❌ Rollup não encontrado, tentando instalação de emergência..."
            npm install rollup vite --force --no-fund --no-audit
            npm install @rollup/rollup-linux-x64-gnu --save-optional --force --no-fund --no-audit || true
          }
          
          # Execute build with error handling
          npm run build || {
            echo "❌ Build falhou, tentando diagnóstico..."
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Platform: $(node -e 'console.log(process.platform + \"-\" + process.arch)')"
            echo ""
            echo "Rollup modules installed:"
            find node_modules -name "*rollup*" -type d | head -10 || echo "Nenhum módulo Rollup encontrado"
            echo ""
            echo "Tentando build com verbose..."
            npm run build --verbose || exit 1
          }
          
          echo "✅ Build do frontend concluído"

      - name: 🧪 Validate TypeScript (Backend)
        run: |
          echo "🔍 Validando TypeScript do backend..."
          cd apps/backend
          npx tsc --noEmit
          echo "✅ TypeScript do backend validado"

      - name: 🧪 Validate TypeScript (Frontend)
        run: |
          echo "🔍 Validando TypeScript do frontend..."
          cd apps/web
          npm run typecheck
          echo "✅ TypeScript do frontend validado"

  # ====================================
  # JOB 2: DEPLOY NA VPS
  # ====================================
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: validate-and-build
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 900s
          command_timeout: 900s
          script: |
            # Função de log com timestamp
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
            }
            
            # Configurações
            APP_DIR="${{ env.APP_DIR }}"
            REPO_URL="https://github.com/${{ github.repository }}.git"
            COMPOSE_PROJECT_NAME="${{ env.COMPOSE_PROJECT_NAME }}"
            
            # ====================================
            # ETAPA 1: PREPARAR AMBIENTE
            # ====================================
            log "🚀 INICIANDO DEPLOY SOCIAL BÍBLIA"
            log "Backend: Vincent Queimado Express + Prisma + TypeScript"
            log "Database: PostgreSQL"
            log "Frontend: React + Vite"
            
            # Criar diretório da aplicação
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            # Parar containers existentes
            log "⏹️ Parando containers existentes..."
            docker compose -f docker-compose.new.yml down --remove-orphans 2>/dev/null || true
            
            # ====================================
            # ETAPA 2: ATUALIZAR CÓDIGO
            # ====================================
            log "📥 Atualizando código fonte..."
            
            if [ ! -d ".git" ]; then
              log "📥 Clonando repositório..."
              git clone $REPO_URL . || {
                log "❌ Clone falhou, usando download direto..."
                curl -L https://github.com/${{ github.repository }}/archive/main.tar.gz | tar xz --strip-components=1
              }
            else
              log "🔄 Atualizando repositório existente..."
              git fetch origin && git reset --hard origin/main && git clean -fd
            fi
            
            # Verificar se arquivos essenciais existem
            REQUIRED_FILES="docker-compose.new.yml apps/backend/package.json apps/web/package.json configs/docker/Dockerfile.backend configs/docker/Dockerfile.web"
            for file in $REQUIRED_FILES; do
              if [ ! -f "$file" ]; then
                log "❌ Arquivo obrigatório não encontrado: $file"
                ls -la $(dirname "$file")/
                exit 1
              fi
            done
            
            log "✅ Código fonte atualizado com sucesso"
            
            # ====================================
            # ETAPA 3: INSTALAR DEPENDÊNCIAS DO SISTEMA
            # ====================================
            log "🔧 Verificando dependências do sistema..."
            
            # Atualizar lista de pacotes
            apt-get update -qq
            
            # Instalar Docker se necessário
            if ! command -v docker >/dev/null 2>&1; then
              log "📦 Instalando Docker..."
              curl -fsSL https://get.docker.com | sh
              systemctl start docker
              systemctl enable docker
              log "✅ Docker instalado"
            else
              log "✅ Docker já instalado ($(docker --version))"
            fi
            
            # Verificar Docker Compose
            if ! docker compose version >/dev/null 2>&1; then
              log "📦 Instalando Docker Compose..."
              apt-get install -y docker-compose-plugin
              log "✅ Docker Compose instalado"
            else
              log "✅ Docker Compose já instalado ($(docker compose version))"
            fi
            
            # Verificar se Docker está funcionando
            if ! docker info >/dev/null 2>&1; then
              log "❌ Docker não está funcionando corretamente"
              systemctl restart docker
              sleep 10
              if ! docker info >/dev/null 2>&1; then
                log "❌ Falha crítica: Docker não está funcionando"
                exit 1
              fi
            fi
            
            log "✅ Todas as dependências do sistema verificadas"
            
            # ====================================
            # ETAPA 4: CONFIGURAR VARIÁVEIS DE AMBIENTE
            # ====================================
            log "📝 Configurando variáveis de ambiente..."
            
            # Copiar arquivo de produção se não existir
            if [ ! -f ".env" ]; then
              if [ -f ".env.production" ]; then
                log "📋 Usando .env.production existente"
                cp .env.production .env
              else
                log "📝 Criando arquivo .env de produção..."
                cat > .env << 'EOF'
            # ==============================================
            # CONFIGURAÇÕES DE PRODUÇÃO - SOCIAL BÍBLIA
            # Backend: Vincent Queimado Express + Prisma + TypeScript
            # ==============================================
            
            # Database Configuration (PostgreSQL)
            POSTGRES_DB=socialbiblia_db
            POSTGRES_USER=socialbiblia_user
            POSTGRES_PASSWORD=SocialBiblia@2024#SecureDB!VPS
            POSTGRES_PORT=5432
            DATABASE_URL=postgresql://socialbiblia_user:SocialBiblia@2024#SecureDB!VPS@postgres:5432/socialbiblia_db?schema=public
            
            # API Configuration (Vincent Queimado Backend)
            APP_URL_HOST=0.0.0.0
            APP_URL_PORT=3344
            SSL_ALLOW=false
            API_PREFIX=api
            API_JSON_LIMIT=5mb
            API_EXT_URLENCODED=false
            CORS_ALLOW_ORIGIN=*
            
            # JWT Configuration (Vincent Queimado Format)
            JWT_SECRET_USER=SocialBiblia@VincentQueimado#UserJWT2024!VPS#Secure
            JWT_SECRET_DEVICE=SocialBiblia@VincentQueimado#DeviceJWT2024!VPS#Secure
            JWT_EXPIRED_IN=24h
            
            # Security Configuration
            BCRYPT_SALTROUNDS=12
            RATE_LIMIT_MAX=500
            RATE_LIMIT_WINDOW=15
            
            # Debug Configuration (DISABLED IN PRODUCTION)
            DEBUG_HTTP_REQUEST=false
            DEBUG_HTTP_CONNECTION=false
            
            # Service Ports
            API_PORT=3344
            WEB_PORT=3000
            PGLADMIN_PORT=8080
            
            # pgAdmin Configuration
            PGLADMIN_DEFAULT_EMAIL=admin@socialbiblia.com
            PGLADMIN_DEFAULT_PASSWORD=SocialBiblia@Admin2024!VPS
            
            # Email Configuration (Optional)
            EMAIL_USER=admin@socialbiblia.com
            EMAIL_PASSWORD=
            EMAIL_SERVICE=gmail
            EMAIL_OAUTH_CLIENT_ID=
            EMAIL_OAUTH_CLIENT_SECRET=
            EMAIL_OAUTH_REFRESH_TOKEN=
            
            # Production Environment
            NODE_ENV=production
            TZ=America/Sao_Paulo
            COMPOSE_PROFILES=production
            EOF
              fi
            fi
            
            log "✅ Variáveis de ambiente configuradas"
            
            # ====================================
            # ETAPA 5: DIAGNÓSTICO DO SISTEMA
            # ====================================
            log "🔍 Diagnóstico do sistema..."
            
            log "💾 Recursos disponíveis:"
            echo "  Memory: $(free -h | grep '^Mem:' | awk '{print $3"/"$2" ("$5")"}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
            echo "  Load: $(uptime | sed 's/.*load average: //')"
            
            log "🐳 Docker Status:"
            docker --version
            docker compose version
            docker system df
            
            log "📦 Containers existentes:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
            
            log "🔌 Portas em uso:"
            netstat -tulpn | grep -E ':(3000|3344|5432|8080) ' | head -5 || echo "  Portas principais livres"
            
            # ====================================
            # ETAPA 6: LIMPEZA PRE-BUILD
            # ====================================
            log "🧹 Limpando ambiente..."
            
            # Parar containers do projeto
            docker compose -f docker-compose.new.yml down --remove-orphans 2>/dev/null || true
            
            # Limpar apenas imagens do projeto
            docker images --format "table {{.Repository}}:{{.Tag}}" | grep -E "(socialbiblia|backend|web)" | awk '{print $1}' | xargs -r docker rmi -f 2>/dev/null || true
            
            # Limpar volumes órfãos do projeto
            docker volume ls --format "{{.Name}}" | grep "socialbiblia" | xargs -r docker volume rm 2>/dev/null || true
            
            log "✅ Ambiente limpo"
            
            # ====================================
            # ETAPA 7: BUILD E DEPLOY
            # ====================================
            log "🔨 Iniciando build e deploy..."
            
            # Build das imagens
            log "🏗️ Fazendo build das imagens..."
            if ! docker compose -f docker-compose.new.yml build --no-cache --parallel; then
              log "❌ Falha no build das imagens!"
              docker system df
              exit 1
            fi
            
            log "✅ Build das imagens concluído"
            
            # Iniciar serviços
            log "🚀 Iniciando serviços..."
            if ! docker compose -f docker-compose.new.yml up -d; then
              log "❌ Falha ao iniciar serviços!"
              docker compose -f docker-compose.new.yml logs
              exit 1
            fi
            
            log "✅ Serviços iniciados"
            
            # ====================================
            # ETAPA 8: AGUARDAR INICIALIZAÇÃO
            # ====================================
            log "⏳ Aguardando inicialização dos serviços..."
            
            # Aguardar PostgreSQL
            log "🐘 Aguardando PostgreSQL..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if docker compose -f docker-compose.new.yml exec -T postgres pg_isready -U socialbiblia_user -d socialbiblia_db >/dev/null 2>&1; then
                log "✅ PostgreSQL pronto!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 20)) -eq 0 ]; then
                log "⏳ Aguardando PostgreSQL... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando PostgreSQL"
              docker compose -f docker-compose.new.yml logs postgres
              exit 1
            fi
            
            # Executar migrações do Prisma
            log "🗃️ Executando migrações do banco..."
            if ! docker compose -f docker-compose.new.yml exec -T api npx prisma migrate deploy; then
              log "⚠️ Migrações falharam, tentando reset..."
              docker compose -f docker-compose.new.yml exec -T api npx prisma migrate reset --force
              docker compose -f docker-compose.new.yml exec -T api npx prisma migrate deploy
            fi
            
            # Executar seed (opcional)
            log "🌱 Executando seed do banco..."
            docker compose -f docker-compose.new.yml exec -T api npm run prisma:seed || log "⚠️ Seed falhou ou já executado"
            
            # Aguardar API
            log "🔌 Aguardando API..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:3344/api/info >/dev/null 2>&1; then
                log "✅ API pronta!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 20)) -eq 0 ]; then
                log "⏳ Aguardando API... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando API"
              docker compose -f docker-compose.new.yml logs api
              exit 1
            fi
            
            # Aguardar Frontend
            log "🌐 Aguardando Frontend..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                log "✅ Frontend pronto!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 10)) -eq 0 ]; then
                log "⏳ Aguardando Frontend... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando Frontend"
              docker compose -f docker-compose.new.yml logs web
              exit 1
            fi
            
            # ====================================
            # ETAPA 9: VERIFICAÇÕES FINAIS
            # ====================================
            log "🔍 Executando verificações finais..."
            
            # Status dos containers
            log "📊 Status dos containers:"
            docker compose -f docker-compose.new.yml ps
            
            # Health checks
            HEALTH_ISSUES=""
            
            # Test API endpoints
            if curl -f http://localhost:3344/api/info >/dev/null 2>&1; then
              log "✅ API Health Check: OK"
            else
              log "❌ API Health Check: FALHOU"
              HEALTH_ISSUES="api "
            fi
            
            # Test Frontend
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              log "✅ Frontend Health Check: OK"
            else
              log "❌ Frontend Health Check: FALHOU"
              HEALTH_ISSUES="frontend "
            fi
            
            # Test pgAdmin
            if curl -f http://localhost:8080 >/dev/null 2>&1; then
              log "✅ pgAdmin Health Check: OK"
            else
              log "⚠️ pgAdmin Health Check: Pode estar inicializando"
            fi
            
            # Verificar se containers estão rodando
            EXPECTED_CONTAINERS="socialbiblia_postgres socialbiblia_api socialbiblia_web"
            for container in $EXPECTED_CONTAINERS; do
              if docker ps --format "{{.Names}}" | grep -q "$container"; then
                log "✅ Container $container: Rodando"
              else
                log "❌ Container $container: NÃO está rodando"
                HEALTH_ISSUES="$container "
              fi
            done
            
            # ====================================
            # ETAPA 10: RESULTADO FINAL
            # ====================================
            if [ -n "$HEALTH_ISSUES" ]; then
              log "❌ DEPLOY CONCLUÍDO COM PROBLEMAS!"
              log "🔍 Serviços com problemas: $HEALTH_ISSUES"
              log "📋 Logs dos containers:"
              docker compose -f docker-compose.new.yml logs --tail=50
              exit 1
            else
              log "🎉 DEPLOY DA SOCIAL BÍBLIA CONCLUÍDO COM SUCESSO!"
              log ""
              log "🌐 APLICAÇÃO DISPONÍVEL EM:"
              log "   ✅ Frontend (React):     http://${{ env.VPS_HOST }}:3000"
              log "   ✅ API (Vincent Q.):     http://${{ env.VPS_HOST }}:3344/api/"
              log "   ✅ API Docs (Swagger):  http://${{ env.VPS_HOST }}:3344/api/docs"
              log "   ✅ pgAdmin:             http://${{ env.VPS_HOST }}:8080"
              log ""
              log "🔧 TECNOLOGIAS DEPLOYADAS:"
              log "   • Backend: Vincent Queimado Express + Prisma + TypeScript"
              log "   • Database: PostgreSQL 15"
              log "   • Frontend: React 18 + Vite"
              log "   • Container: Docker + Docker Compose"
              log ""
              log "📊 RESUMO:"
              log "   • Containers ativos: $(docker ps --format '{{.Names}}' | grep socialbiblia | wc -l)"
              log "   • Volumes: $(docker volume ls --format '{{.Name}}' | grep socialbiblia | wc -l)"
              log "   • Networks: $(docker network ls --format '{{.Name}}' | grep socialbiblia | wc -l)"
              log ""
              log "💾 USO DE RECURSOS:"
              docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -5
              log ""
              log "🚀 DEPLOY FINALIZADO - APLICAÇÃO PRONTA PARA USO!"
            fi

  # ====================================
  # JOB 3: NOTIFICAÇÃO (OPCIONAL)
  # ====================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📢 Deploy Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy realizado com sucesso!"
            echo "🌐 Social Bíblia disponível em: http://${{ env.VPS_HOST }}:3000"
          else
            echo "❌ Deploy falhou!"
            exit 1
          fi