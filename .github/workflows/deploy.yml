name: 🚀 Deploy Biblicai to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/opt/biblicai'
  COMPOSE_PROJECT_NAME: 'biblicai'

jobs:
  # ====================================
  # JOB 1: VALIDAÇÃO E BUILD LOCAL
  # ====================================
  validate-and-build:
    name: 🔍 Validate & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/backend/package-lock.json
            apps/web/package-lock.json

      - name: 🔍 Verify project structure
        run: |
          echo "🔍 Verificando estrutura do projeto..."
          
          # Arquivos obrigatórios para o novo setup
          REQUIRED_FILES=(
            "docker-compose.new.yml"
            "apps/backend/package.json"
            "apps/backend/tsconfig.json"
            "apps/backend/prisma/schema.prisma"
            "apps/backend/.env.ci"
            "apps/backend/src/server/app.ts"
            "apps/web/package.json"
            "apps/web/vite.config.ts"
            "configs/docker/Dockerfile.backend"
            "configs/docker/Dockerfile.web"
            "configs/docker/nginx.conf"
            "configs/docker/default.conf"
            ".env.production"
            "scripts/deploy-vps.sh"
            "scripts/deploy-production.sh"
            "turbo.json"
            "tsconfig.base.json"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Estrutura do projeto validada"

      - name: 🏗️ Install All Dependencies (Monorepo)
        run: |
          echo "📦 Instalando dependências do monorepo e workspaces..."
          npm install --frozen-lockfile --ignore-scripts --no-fund --no-audit
          echo "✅ Dependências do monorepo e workspaces instaladas"

      - name: 🔧 Setup CI Environment
        run: |
          echo "🔧 Configurando ambiente CI..."
          cd apps/backend
          cp .env.ci .env
          echo "✅ Arquivo de ambiente CI configurado"

      - name: 🔧 Generate Prisma Client
        run: |
          echo "🗃️ Gerando cliente Prisma..."
          cd apps/backend
          npx prisma generate
          echo "✅ Cliente Prisma gerado"
          
      - name: 🔍 Validate Prisma Schema
        run: |
          echo "🔍 Validando schema do Prisma..."
          cd apps/backend
          npx prisma validate
          echo "✅ Schema do Prisma validado"

      - name: 🏗️ Build Backend
        run: |
          echo "🔨 Fazendo build do backend..."
          npm run build:backend
          echo "✅ Build do backend concluído"

      - name: 🏗️ Build Frontend
        run: |
          echo "🔨 Fazendo build do frontend..."
          npm run build:web
          echo "✅ Build do frontend concluído"

      - name: 🧪 Validate TypeScript (Backend)
        run: |
          echo "🔍 Validando TypeScript do backend..."
          cd apps/backend
          npx tsc --noEmit
          echo "✅ TypeScript do backend validado"
          
      - name: 🔍 Validate API Structure
        run: |
          echo "🔍 Validando estrutura da API..."
          cd apps/backend
          
          # Verificar arquivos críticos das novas implementações
          CRITICAL_FILES=(
            "src/controllers/client/posts_controller.ts"
            "src/controllers/client/comments_controller.ts"
            "src/services/client/posts/index.ts"
            "src/services/client/comments/index.ts"
            "src/routes/client/v1/posts_route.ts"
            "src/routes/client/v1/comments_route.ts"
            "src/dao/posts/post_delete_dao.ts"
            "src/dao/comments/comment_create_dao.ts"
            "src/dao/comments/comment_get_all_dao.ts"
            "prisma/migrations/20250724100141_initial_sqlite/migration.sql"
          )
          
          echo "Verificando arquivos críticos das implementações..."
          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing critical file: $file"
              exit 1
            fi
          done
          
          echo "✅ Estrutura da API validada"

      - name: 🧪 Validate TypeScript (Frontend)
        run: |
          echo "🔍 Validando TypeScript do frontend..."
          cd apps/web
          npm run typecheck
          echo "✅ TypeScript do frontend validado"

  # ====================================
  # JOB 2: DEPLOY NA VPS
  # ====================================
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: validate-and-build
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 900s
          command_timeout: 900s
          script: |
            # Download and execute the production deploy script
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/deploy-production.sh -o /tmp/deploy-production.sh
            chmod +x /tmp/deploy-production.sh
            /tmp/deploy-production.sh "${{ env.VPS_HOST }}" "${{ env.APP_DIR }}" "https://github.com/${{ github.repository }}.git"

  # ====================================
  # JOB 3: NOTIFICAÇÃO (OPCIONAL)
  # ====================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📢 Deploy Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy realizado com sucesso!"
            echo "🌐 Biblicai disponível em: http://${{ env.VPS_HOST }}:3000"
          else
            echo "❌ Deploy falhou!"
            exit 1
          fi