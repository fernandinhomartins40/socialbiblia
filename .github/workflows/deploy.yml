name: 🚀 Deploy Biblicai to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/opt/biblicai'
  COMPOSE_PROJECT_NAME: 'biblicai'

jobs:
  # ====================================
  # JOB 1: VALIDAÇÃO E BUILD LOCAL
  # ====================================
  validate-and-build:
    name: 🔍 Validate & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/backend/package-lock.json

      - name: 🔍 Verify project structure
        run: |
          echo "🔍 Verificando estrutura do projeto..."
          
          # Arquivos obrigatórios para o novo setup
          REQUIRED_FILES=(
            "docker-compose.new.yml"
            "apps/backend/package.json"
            "apps/backend/tsconfig.json"
            "apps/backend/prisma/schema.prisma"
            "apps/backend/.env.ci"
            "apps/backend/src/app.ts"
            "apps/web/package.json"
            "apps/web/vite.config.ts"
            "configs/docker/Dockerfile.backend"
            "configs/docker/Dockerfile.web"
            ".env.production"
            "scripts/deploy-vps.sh"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Estrutura do projeto validada"

      - name: 🏗️ Install All Dependencies (Monorepo)
        run: |
          echo "📦 Instalando dependências do monorepo e workspaces..."
          # Instalar dependências do root e de todos os workspaces
          npm install --frozen-lockfile --ignore-scripts --no-fund --no-audit
          echo "✅ Dependências do monorepo e workspaces instaladas"

      - name: 🔧 Setup CI Environment
        run: |
          echo "🔧 Configurando ambiente CI..."
          cd apps/backend
          # Copy CI environment file
          cp .env.ci .env
          echo "✅ Arquivo de ambiente CI configurado"

      - name: 🔧 Generate Prisma Client
        run: |
          echo "🗃️ Gerando cliente Prisma..."
          cd apps/backend
          npx prisma generate
          echo "✅ Cliente Prisma gerado"
          
      - name: 🔍 Validate Prisma Schema
        run: |
          echo "🔍 Validando schema do Prisma..."
          cd apps/backend
          npx prisma validate
          echo "✅ Schema do Prisma validado"

      - name: 🏗️ Build Backend
        run: |
          echo "🔨 Fazendo build do backend..."
          npm run build:backend
          echo "✅ Build do backend concluído"

      - name: 🏗️ Build Frontend
        run: |
          echo "🔨 Fazendo build do frontend..."
          npm run build:web
          echo "✅ Build do frontend concluído"

      - name: 🧪 Validate TypeScript (Backend)
        run: |
          echo "🔍 Validando TypeScript do backend..."
          cd apps/backend
          npx tsc --noEmit
          echo "✅ TypeScript do backend validado"
          
      - name: 🔍 Validate API Structure
        run: |
          echo "🔍 Validando estrutura da API..."
          cd apps/backend
          
          # Verificar arquivos críticos das novas implementações
          CRITICAL_FILES=(
            "src/controllers/client/posts_controller.ts"
            "src/controllers/client/comments_controller.ts"
            "src/services/client/posts/index.ts"
            "src/services/client/comments/index.ts"
            "src/routes/client/v1/posts_route.ts"
            "src/routes/client/v1/comments_route.ts"
            "src/dao/posts/post_delete_dao.ts"
            "src/dao/comments/comment_create_dao.ts"
            "src/dao/comments/comment_get_all_dao.ts"
            "prisma/migrations/20250123_recommendations_system/migration.sql"
          )
          
          echo "Verificando arquivos críticos das implementações..."
          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing critical file: $file"
              exit 1
            fi
          done
          
          echo "✅ Estrutura da API validada"

      - name: 🧪 Validate TypeScript (Frontend)
        run: |
          echo "🔍 Validando TypeScript do frontend..."
          cd apps/web
          npm run typecheck
          echo "✅ TypeScript do frontend validado"

  # ====================================
  # JOB 2: DEPLOY NA VPS
  # ====================================
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: validate-and-build
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 900s
          command_timeout: 900s
          script: |
            # Função de log com timestamp
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
            }
            
            # Configurações
            APP_DIR="${{ env.APP_DIR }}"
            REPO_URL="https://github.com/${{ github.repository }}.git"
            COMPOSE_PROJECT_NAME="${{ env.COMPOSE_PROJECT_NAME }}"
            
            # ====================================
            # ETAPA 1: PREPARAR AMBIENTE
            # ====================================
            log "🚀 INICIANDO DEPLOY BIBLICAI"
            log "Backend: Vincent Queimado Express + Prisma + TypeScript"
            log "Database: PostgreSQL"
            log "Frontend: React + Vite"
            
            # Criar diretório da aplicação
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            # Parar containers existentes
            log "⏹️ Parando containers existentes..."
            docker compose -f docker-compose.new.yml down --remove-orphans 2>/dev/null || true
            
            # ====================================
            # ETAPA 2: ATUALIZAR CÓDIGO
            # ====================================
            log "📥 Atualizando código fonte..."
            
            if [ ! -d ".git" ]; then
              log "📥 Clonando repositório..."
              git clone $REPO_URL . || {
                log "❌ Clone falhou, usando download direto..."
                curl -L https://github.com/${{ github.repository }}/archive/main.tar.gz | tar xz --strip-components=1
              }
            else
              log "🔄 Atualizando repositório existente..."
              git fetch origin && git reset --hard origin/main && git clean -fd
            fi
            
            # Verificar se arquivos essenciais existem
            REQUIRED_FILES="docker-compose.new.yml apps/backend/package.json apps/web/package.json configs/docker/Dockerfile.backend configs/docker/Dockerfile.web"
            for file in $REQUIRED_FILES; do
              if [ ! -f "$file" ]; then
                log "❌ Arquivo obrigatório não encontrado: $file"
                ls -la $(dirname "$file")/
                exit 1
              fi
            done
            
            log "✅ Código fonte atualizado com sucesso"
            
            # ====================================
            # ETAPA 3: INSTALAR DEPENDÊNCIAS DO SISTEMA
            # ====================================
            log "🔧 Verificando dependências do sistema..."
            
            # Atualizar lista de pacotes
            apt-get update -qq
            
            # Instalar Docker se necessário
            if ! command -v docker >/dev/null 2>&1; then
              log "📦 Instalando Docker..."
              curl -fsSL https://get.docker.com | sh
              systemctl start docker
              systemctl enable docker
              log "✅ Docker instalado"
            else
              log "✅ Docker já instalado ($(docker --version))"
            fi
            
            # Verificar Docker Compose
            if ! docker compose version >/dev/null 2>&1; then
              log "📦 Instalando Docker Compose..."
              apt-get install -y docker-compose-plugin
              log "✅ Docker Compose instalado"
            else
              log "✅ Docker Compose já instalado ($(docker compose version))"
            fi
            
            # Verificar se Docker está funcionando
            if ! docker info >/dev/null 2>&1; then
              log "❌ Docker não está funcionando corretamente"
              systemctl restart docker
              sleep 10
              if ! docker info >/dev/null 2>&1; then
                log "❌ Falha crítica: Docker não está funcionando"
                exit 1
              fi
            fi
            
            log "✅ Todas as dependências do sistema verificadas"
            
            # ====================================
            # ETAPA 4: CONFIGURAR VARIÁVEIS DE AMBIENTE
            # ====================================
            log "📝 Configurando variáveis de ambiente..."
            
            # Copiar arquivo de produção se não existir
            if [ ! -f ".env" ]; then
              if [ -f ".env.production" ]; then
                log "📋 Usando .env.production existente"
                cp .env.production .env
              else
                log "📝 Criando arquivo .env de produção..."
                cat > .env << 'EOF'
            # ==============================================
            # CONFIGURAÇÕES DE PRODUÇÃO - BIBLICAI
            # Backend: Vincent Queimado Express + Prisma + TypeScript
            # ==============================================
            
            # Database Configuration (PostgreSQL)
            POSTGRES_DB=biblicai_db
            POSTGRES_USER=biblicai_user
            POSTGRES_PASSWORD=Biblicai@2024#SecureDB!VPS
            POSTGRES_PORT=5432
            DATABASE_URL=postgresql://biblicai_user:Biblicai@2024#SecureDB!VPS@postgres:5432/biblicai_db?schema=public
            
            # API Configuration (Vincent Queimado Backend)
            APP_URL_HOST=0.0.0.0
            APP_URL_PORT=3000
            SSL_ALLOW=false
            API_PREFIX=api
            API_JSON_LIMIT=5mb
            API_EXT_URLENCODED=false
            CORS_ALLOW_ORIGIN=*
            
            # JWT Configuration (Vincent Queimado Format)
            JWT_SECRET_USER=Biblicai@VincentQueimado#UserJWT2024!VPS#Secure
            JWT_SECRET_DEVICE=Biblicai@VincentQueimado#DeviceJWT2024!VPS#Secure
            JWT_EXPIRED_IN=24h
            
            # Security Configuration
            BCRYPT_SALTROUNDS=12
            RATE_LIMIT_MAX=500
            RATE_LIMIT_WINDOW=15
            
            # Debug Configuration (DISABLED IN PRODUCTION)
            DEBUG_HTTP_REQUEST=false
            DEBUG_HTTP_CONNECTION=false
            
            # Service Ports
            API_PORT=3000
            WEB_PORT=3000
            PGLADMIN_PORT=8080
            
            # pgAdmin Configuration
            PGLADMIN_DEFAULT_EMAIL=admin@biblicai.com.br
            PGLADMIN_DEFAULT_PASSWORD=Biblicai@Admin2024!VPS
            
            # Email Configuration (Optional)
            EMAIL_USER=admin@biblicai.com.br
            EMAIL_PASSWORD=
            EMAIL_SERVICE=gmail
            EMAIL_OAUTH_CLIENT_ID=
            EMAIL_OAUTH_CLIENT_SECRET=
            EMAIL_OAUTH_REFRESH_TOKEN=
            
            # Production Environment
            NODE_ENV=production
            TZ=America/Sao_Paulo
            COMPOSE_PROFILES=production
            EOF
              fi
            fi
            
            log "✅ Variáveis de ambiente configuradas"
            
            # ====================================
            # ETAPA 5: DIAGNÓSTICO DO SISTEMA
            # ====================================
            log "🔍 Diagnóstico do sistema..."
            
            log "💾 Recursos disponíveis:"
            echo "  Memory: $(free -h | grep '^Mem:' | awk '{print $3"/"$2" ("$5")"}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
            echo "  Load: $(uptime | sed 's/.*load average: //')"
            
            log "🐳 Docker Status:"
            docker --version
            docker compose version
            docker system df
            
            log "📦 Containers existentes:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
            
            log "🔌 Portas em uso:"
            netstat -tulpn | grep -E ':(3000|5432|8080) ' | head -5 || echo "  Portas principais livres"
            
            # ====================================
            # ETAPA 6: LIMPEZA AGRESSIVA PRE-BUILD
            # ====================================
            log "🧹 Limpando ambiente com limpeza agressiva..."
            
            # Parar containers do projeto
            docker compose -f docker-compose.new.yml down --remove-orphans 2>/dev/null || true
            
            # LIMPEZA AGRESSIVA: Remover containers conflitantes por nome
            log "🗑️ Removendo containers conflitantes..."
            for container_name in biblicai_postgres biblicai_api biblicai_web biblicai_nginx biblicai_pgadmin; do
              if docker ps -a --format "{{.Names}}" | grep -q "^${container_name}$"; then
                log "Removendo container conflitante: $container_name"
                docker rm -f $container_name 2>/dev/null || true
              fi
            done
            
            # Remover também containers antigos socialbiblia (fallback)
            for container_name in socialbiblia_postgres socialbiblia_api socialbiblia_web socialbiblia_nginx socialbiblia_pgadmin; do
              if docker ps -a --format "{{.Names}}" | grep -q "^${container_name}$"; then
                log "Removendo container antigo: $container_name"
                docker rm -f $container_name 2>/dev/null || true
              fi
            done
            
            # Limpar imagens do projeto
            docker images --format "table {{.Repository}}:{{.Tag}}" | grep -E "(biblicai|socialbiblia|backend|web)" | awk '{print $1}' | xargs -r docker rmi -f 2>/dev/null || true
            
            # Limpar volumes órfãos do projeto
            docker volume ls --format "{{.Name}}" | grep -E "(biblicai|socialbiblia)" | xargs -r docker volume rm 2>/dev/null || true
            
            # Limpar networks órfãs
            docker network ls --format "{{.Name}}" | grep -E "(biblicai|socialbiblia)" | xargs -r docker network rm 2>/dev/null || true
            
            log "✅ Ambiente limpo"
            
            # ====================================
            # ETAPA 7: BUILD E DEPLOY
            # ====================================
            log "🔨 Iniciando build e deploy..."
            
            # Build das imagens
            log "🏗️ Fazendo build das imagens..."
            if ! docker compose -f docker-compose.new.yml build --no-cache --parallel; then
              log "❌ Falha no build das imagens!"
              docker system df
              exit 1
            fi
            
            log "✅ Build das imagens concluído"
            
            # Iniciar serviços
            log "🚀 Iniciando serviços..."
            if ! docker compose -f docker-compose.new.yml up -d; then
              log "❌ Falha ao iniciar serviços!"
              docker compose -f docker-compose.new.yml logs
              exit 1
            fi
            
            log "✅ Serviços iniciados"
            
            # ====================================
            # ETAPA 8: AGUARDAR INICIALIZAÇÃO
            # ====================================
            log "⏳ Aguardando inicialização dos serviços..."
            
            # Aguardar PostgreSQL
            log "🐘 Aguardando PostgreSQL..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if docker compose -f docker-compose.new.yml exec -T postgres pg_isready -U biblicai_user -d biblicai_db >/dev/null 2>&1; then
                log "✅ PostgreSQL pronto!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 20)) -eq 0 ]; then
                log "⏳ Aguardando PostgreSQL... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando PostgreSQL"
              docker compose -f docker-compose.new.yml logs postgres
              exit 1
            fi
            
            # Executar migrações do Prisma
            log "🗃️ Executando migrações do banco..."
            
            # Verificar se as migrações existem
            log "📋 Verificando migrações disponíveis..."
            docker compose -f docker-compose.new.yml exec -T api npx prisma migrate status || log "⚠️ Status das migrações não pôde ser verificado"
            
            # Tentar deploy das migrações
            if ! docker compose -f docker-compose.new.yml exec -T api npx prisma migrate deploy; then
              log "⚠️ Migrações falharam na primeira tentativa, verificando causa..."
              
              # Verificar se o banco está acessível
              if ! docker compose -f docker-compose.new.yml exec -T postgres pg_isready -U biblicai_user -d biblicai_db; then
                log "❌ Banco não está acessível para migrações"
                exit 1
              fi
              
              # Verificar logs de erro
              log "📋 Logs do container API para diagnóstico:"
              docker compose -f docker-compose.new.yml logs api | tail -20
              
              log "⚠️ Tentando reset e nova migração..."
              docker compose -f docker-compose.new.yml exec -T api npx prisma migrate reset --force
              docker compose -f docker-compose.new.yml exec -T api npx prisma migrate deploy
            fi
            
            # Verificar se as novas tabelas foram criadas
            log "🔍 Verificando tabelas criadas..."
            docker compose -f docker-compose.new.yml exec -T postgres psql -U biblicai_user -d biblicai_db -c "\\dt" | grep -E "(posts|comments|users|user_interactions|recommendation_scores)" || log "⚠️ Algumas tabelas podem não ter sido criadas"
            
            # Executar seed (opcional)
            log "🌱 Executando seed do banco..."
            docker compose -f docker-compose.new.yml exec -T api npm run prisma:seed || log "⚠️ Seed falhou ou já executado"
            
            # Aguardar API
            log "🔌 Aguardando API..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:3000/api/info >/dev/null 2>&1; then
                log "✅ API pronta!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 20)) -eq 0 ]; then
                log "⏳ Aguardando API... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando API"
              docker compose -f docker-compose.new.yml logs api
              exit 1
            fi
            
            # Aguardar Frontend
            log "🌐 Aguardando Frontend..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                log "✅ Frontend pronto!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
              if [ $((timeout % 10)) -eq 0 ]; then
                log "⏳ Aguardando Frontend... ($timeout segundos restantes)"
              fi
            done
            
            if [ $timeout -le 0 ]; then
              log "❌ Timeout aguardando Frontend"
              docker compose -f docker-compose.new.yml logs web
              exit 1
            fi
            
            # ====================================
            # ETAPA 9: VERIFICAÇÕES FINAIS
            # ====================================
            log "🔍 Executando verificações finais..."
            
            # Status dos containers
            log "📊 Status dos containers:"
            docker compose -f docker-compose.new.yml ps
            
            # Health checks
            HEALTH_ISSUES=""
            
            # Test API endpoints
            if curl -f http://localhost:3000/api/info >/dev/null 2>&1; then
              log "✅ API Health Check: OK"
              
              # Test specific API endpoints for new features
              log "🔍 Testando endpoints específicos..."
              
              # Test posts feed endpoint
              if curl -f -H "Accept: application/json" http://localhost:3000/api/client/posts/feed >/dev/null 2>&1; then
                log "✅ Posts Feed Endpoint: OK"
              else
                log "⚠️ Posts Feed Endpoint: Não acessível"
              fi
              
              # Test auth endpoints
              if curl -f -H "Accept: application/json" http://localhost:3000/api/client/auth/register >/dev/null 2>&1 || [ $? -eq 22 ]; then
                log "✅ Auth Register Endpoint: OK (method not allowed é esperado)"
              else
                log "⚠️ Auth Register Endpoint: Problemas de conectividade"
              fi
              
            else
              log "❌ API Health Check: FALHOU"
              HEALTH_ISSUES="api "
            fi
            
            # Test Frontend
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              log "✅ Frontend Health Check: OK"
            else
              log "❌ Frontend Health Check: FALHOU"
              HEALTH_ISSUES="frontend "
            fi
            
            # Test pgAdmin
            if curl -f http://localhost:8080 >/dev/null 2>&1; then
              log "✅ pgAdmin Health Check: OK"
            else
              log "⚠️ pgAdmin Health Check: Pode estar inicializando"
            fi
            
            # Verificar se containers estão rodando
            EXPECTED_CONTAINERS="biblicai_postgres biblicai_api biblicai_web"
            for container in $EXPECTED_CONTAINERS; do
              if docker ps --format "{{.Names}}" | grep -q "$container"; then
                log "✅ Container $container: Rodando"
              else
                log "❌ Container $container: NÃO está rodando"
                HEALTH_ISSUES="$container "
              fi
            done
            
            # ====================================
            # ETAPA 10: RELATÓRIO DE STATUS FINAL
            # ====================================
            log "📋 GERANDO RELATÓRIO FINAL DE STATUS..."
            echo ""
            echo "==========================================="
            echo "🔍 BIBLICAI DEPLOY STATUS REPORT"
            echo "==========================================="
            echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "Health Issues: ${HEALTH_ISSUES:-NENHUM}"
            echo ""
            
            # Sistema
            echo "📊 SISTEMA:"
            echo "  Memory: $(free -h | grep '^Mem:' | awk '{print $3"/"$2}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $3"/"$2}')"
            echo "  Load: $(uptime | sed 's/.*load average: //')"
            echo ""
            
            # Docker info
            echo "🐳 DOCKER:"
            echo "  Version: $(docker --version | cut -d' ' -f3 | tr -d ',')"
            echo "  Compose: $(docker compose version | head -1 | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')"
            echo ""
            
            # Containers Status
            echo "📦 CONTAINERS STATUS:"
            docker ps -a --format "{{.Names}} {{.Status}} {{.Ports}}" | grep biblicai | head -10 || echo "  Nenhum container biblicai encontrado"
            echo ""
            
            # Network and Volumes
            echo "🌐 RESOURCES:"
            echo "  Networks: $(docker network ls --format '{{.Name}}' | grep biblicai | wc -l)"
            echo "  Volumes: $(docker volume ls --format '{{.Name}}' | grep biblicai | wc -l)"
            echo ""
            
            # Health checks detalhados
            echo "🔍 HEALTH STATUS:"
                        if curl -f http://localhost:3000/api/info >/dev/null 2>&1; then
            echo "  ✅ API (3000): Respondendo"
            api_response=$(curl -s http://localhost:3000/api/info 2>/dev/null | head -1)
              echo "     Response: ${api_response:0:50}..."
            else
              echo "  ❌ API (3000): Não responde"
            fi
            
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "  ✅ Frontend (3000): Respondendo"
            else
              echo "  ❌ Frontend (3000): Não responde"
            fi
            
            if curl -f http://localhost:8080 >/dev/null 2>&1; then
              echo "  ✅ pgAdmin (8080): Respondendo"
            else
              echo "  ⚠️ pgAdmin (8080): Não responde (normal durante inicialização)"
            fi
            echo ""
            
            # Portas em uso
            echo "🔌 PORTAS:"
            for port in 3000 5432 8080; do
              if netstat -tuln 2>/dev/null | grep -q ":$port "; then
                process=$(netstat -tulpn 2>/dev/null | grep ":$port " | head -1 | awk '{print $7}' | cut -d'/' -f2)
                echo "  Port $port: Em uso por ${process:-unknown}"
              else
                echo "  Port $port: Livre"
              fi
            done
            echo ""
            
            # Se há problemas, mostrar logs críticos
            if [ -n "$HEALTH_ISSUES" ]; then
              echo "📋 LOGS CRÍTICOS (últimas 3 linhas por container):"
              for container in biblicai_postgres biblicai_api biblicai_web; do
                if docker ps -a --format "{{.Names}}" | grep -q "$container"; then
                  echo "--- $container ---"
                  docker logs $container 2>&1 | tail -3 2>/dev/null
                  echo ""
                fi
              done
            fi
            
            # Final integration test
            echo "🔗 TESTE FINAL DE INTEGRAÇÃO:"
            if [ -z "$HEALTH_ISSUES" ]; then
              log "🧪 Executando teste de integração frontend-backend..."
              
              # Test if frontend can reach backend
              frontend_to_backend_test=$(docker compose -f docker-compose.new.yml exec -T web curl -f http://api:3000/api/info 2>/dev/null || echo "FAILED")
              if [ "$frontend_to_backend_test" != "FAILED" ]; then
                echo "  ✅ Frontend consegue comunicar com Backend"
              else
                echo "  ⚠️ Frontend não consegue comunicar com Backend (pode ser normal)"
              fi
              
              # Test external access
              external_test=$(curl -f http://localhost:3000/api/info 2>/dev/null || echo "FAILED")
              if [ "$external_test" != "FAILED" ]; then
                echo "  ✅ API acessível externamente"
              else
                echo "  ⚠️ API não acessível externamente"
              fi
            fi
            echo ""
            
            echo "==========================================="
            if [ -n "$HEALTH_ISSUES" ]; then
              echo "❌ DEPLOY FALHOU - Problemas: $HEALTH_ISSUES"
              echo "🏁 FIM DO RELATÓRIO DE FALHA"
            else
              echo "✅ DEPLOY BEM-SUCEDIDO"
              echo "🏁 FIM DO RELATÓRIO DE SUCESSO"
            fi
            echo "==========================================="
            echo ""
            
            # ====================================
            # RESULTADO FINAL
            # ====================================
            if [ -n "$HEALTH_ISSUES" ]; then
              log "❌ DEPLOY CONCLUÍDO COM PROBLEMAS!"
              log "🔍 Serviços com problemas: $HEALTH_ISSUES"
              exit 1
            else
              log "🎉 DEPLOY DA BIBLICAI CONCLUÍDO COM SUCESSO!"
              log ""
              log "🌐 APLICAÇÃO DISPONÍVEL EM:"
              log "   ✅ Frontend (React):     http://${{ env.VPS_HOST }}:3000"
                          log "   ✅ API (Vincent Q.):     http://${{ env.VPS_HOST }}:3000/api/"
            log "   ✅ API Docs (Swagger):  http://${{ env.VPS_HOST }}:3000/api/docs"
              log "   ✅ pgAdmin:             http://${{ env.VPS_HOST }}:8080"
              log ""
              log "🔧 TECNOLOGIAS DEPLOYADAS:"
              log "   • Backend: Vincent Queimado Express + Prisma + TypeScript"
              log "   • Database: PostgreSQL 15"
              log "   • Frontend: React 18 + Vite"
              log "   • Container: Docker + Docker Compose"
              log ""
              log "📊 RESUMO:"
              log "   • Containers ativos: $(docker ps --format '{{.Names}}' | grep biblicai | wc -l)"
              log "   • Volumes: $(docker volume ls --format '{{.Name}}' | grep biblicai | wc -l)"
              log "   • Networks: $(docker network ls --format '{{.Name}}' | grep biblicai | wc -l)"
              log ""
              log "💾 USO DE RECURSOS:"
              docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -5
              log ""
              log "🚀 DEPLOY FINALIZADO - APLICAÇÃO PRONTA PARA USO!"
            fi

  # ====================================
  # JOB 3: NOTIFICAÇÃO (OPCIONAL)
  # ====================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📢 Deploy Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy realizado com sucesso!"
            echo "🌐 Biblicai disponível em: http://${{ env.VPS_HOST }}:3000"
          else
            echo "❌ Deploy falhou!"
            exit 1
          fi