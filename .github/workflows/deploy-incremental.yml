name: 🚀 Deploy Incremental SocialBiblia

# Controle de concorrência - ÚNICO deploy por vez
concurrency:
  group: socialbiblia-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'apps/web/src/**'
      - 'apps/web/package*.json'
      - 'package*.json'
      - 'supabase/**'
      - '.github/workflows/deploy-incremental.yml'
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/root/socialbiblia'
  COMPOSE_PROJECT_NAME: 'supabase'

jobs:
  analyze-changes:
    name: 🔍 Analisar Mudanças
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
      has_package_changes: ${{ steps.changes.outputs.has_package_changes }}
      has_config_changes: ${{ steps.changes.outputs.has_config_changes }}
      needs_restart: ${{ steps.changes.outputs.needs_restart }}
      deploy_type: ${{ steps.changes.outputs.deploy_type }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: 🔍 Analisar arquivos alterados
      id: changes
      run: |
        echo "🔍 Analisando mudanças desde o último commit..."
        
        # Obter arquivos alterados
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all")
        echo "📁 Arquivos alterados:"
        echo "$CHANGED_FILES"
        
        # Inicializar flags
        HAS_CODE=false
        HAS_PACKAGE=false
        HAS_CONFIG=false
        NEEDS_RESTART=false
        
        # Analisar tipos de mudanças para SocialBiblia + Supabase
        if echo "$CHANGED_FILES" | grep -E "(apps/web/src/.*\.(js|ts|tsx|json))" > /dev/null; then
          HAS_CODE=true
          echo "✅ Mudanças de código frontend detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "package(-lock)?\.json" > /dev/null; then
          HAS_PACKAGE=true
          echo "📦 Mudanças em dependências detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "(supabase/.*\.(yml|env|sql)|docker)" > /dev/null; then
          HAS_CONFIG=true
          echo "⚙️ Mudanças de configuração Supabase detectadas"
        fi
        
        # Determinar se precisa restart
        if [[ "$HAS_CODE" == "true" || "$HAS_CONFIG" == "true" ]]; then
          NEEDS_RESTART=true
        fi
        
        # Determinar tipo de deploy
        if [[ "$HAS_PACKAGE" == "true" ]]; then
          DEPLOY_TYPE="full"
          echo "🔄 Deploy completo necessário (dependências mudaram)"
        elif [[ "$HAS_CODE" == "true" ]]; then
          DEPLOY_TYPE="code-only"
          echo "📝 Deploy apenas de código"
        elif [[ "$HAS_CONFIG" == "true" ]]; then
          DEPLOY_TYPE="config-only"
          echo "⚙️ Deploy apenas de configuração"
        else
          DEPLOY_TYPE="minimal"
          echo "📋 Deploy mínimo (docs/workflows)"
        fi
        
        # Definir outputs
        echo "has_code_changes=$HAS_CODE" >> $GITHUB_OUTPUT
        echo "has_package_changes=$HAS_PACKAGE" >> $GITHUB_OUTPUT
        echo "has_config_changes=$HAS_CONFIG" >> $GITHUB_OUTPUT
        echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
        echo "deploy_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 Deploy Incremental
    runs-on: ubuntu-latest
    needs: analyze-changes
    timeout-minutes: 15
    
    steps:
    - name: 📋 Info do Deploy Incremental
      run: |
        echo "🚀 Deploy Incremental SocialBiblia"
        echo "=============================================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "Mudanças de Código: ${{ needs.analyze-changes.outputs.has_code_changes }}"
        echo "Mudanças de Dependências: ${{ needs.analyze-changes.outputs.has_package_changes }}"
        echo "Precisa Restart: ${{ needs.analyze-changes.outputs.needs_restart }}"
        echo "=============================================="

    - name: 🔑 Configurar SSH
      run: |
        echo "🔑 Configurando SSH para deploy incremental..."
        sudo apt-get update && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        echo "✅ SSH configurado"

    - name: 🔍 Verificar estado atual da VPS
      run: |
        echo "🔍 Verificando estado atual..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Estado Atual da VPS ==='
          echo 'Docker version:'
          docker --version || echo 'Docker não encontrado'
          
          echo ''
          echo 'Docker Compose version:'
          if command -v 'docker compose' >/dev/null 2>&1; then
            docker compose version
            DOCKER_COMPOSE_CMD='docker compose'
          elif command -v 'docker-compose' >/dev/null 2>&1; then
            docker-compose version
            DOCKER_COMPOSE_CMD='docker-compose'
          else
            echo 'Docker Compose não encontrado'
            DOCKER_COMPOSE_CMD='none'
          fi
          
          echo ''
          echo 'Docker Containers:'
          docker ps --format 'table {{.Names}}\t{{.Status}}' | grep ${{ env.COMPOSE_PROJECT_NAME }} || echo 'Não rodando'
          
          echo ''
          echo 'Docker Compose status:'
          if [ -f ${{ env.APP_DIR }}/docker-compose.yml ] && [ \"\$DOCKER_COMPOSE_CMD\" != 'none' ]; then
            cd ${{ env.APP_DIR }} && \$DOCKER_COMPOSE_CMD ps || echo 'Docker Compose não encontrado'
          else
            echo '📋 Docker Compose não configurado'
          fi
          
          echo ''
          echo 'Última atualização:'
          cd ${{ env.APP_DIR }} && git log --oneline -1 2>/dev/null || echo 'Repositório não inicializado'
        "

    - name: 📦 Backup Inteligente (somente se necessário)
      if: needs.analyze-changes.outputs.deploy_type == 'full'
      run: |
        echo "📦 Fazendo backup completo (deploy full)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR=/opt/socialbiblia-backups/backup_\$TIMESTAMP
          mkdir -p \$BACKUP_DIR
          
          # Backup crítico - volumes do Docker
          if [ -d ${{ env.APP_DIR }}/data ]; then
            cp -r ${{ env.APP_DIR }}/data \$BACKUP_DIR/
            echo '✅ Data volumes backed up'
          fi
          
          # Backup da configuração atual
          if [ -f ${{ env.APP_DIR }}/.env.production ]; then
            cp ${{ env.APP_DIR }}/.env.production \$BACKUP_DIR/
            echo '✅ Production env backed up'
          fi
          
          echo \"📦 Backup completo criado: \$BACKUP_DIR\"
        "

    - name: 📦 Backup Rápido (somente dados críticos)
      if: needs.analyze-changes.outputs.deploy_type != 'full'
      run: |
        echo "📦 Backup rápido (apenas dados críticos)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          if [ -f ${{ env.APP_DIR }}/.env.production ]; then
            cp ${{ env.APP_DIR }}/.env.production /tmp/env_backup.production
            echo '✅ Environment preservado'
          fi
          
          # Backup dos volumes do banco se existir
          if [ -d ${{ env.APP_DIR }}/data/postgres ]; then
            tar -czf /tmp/postgres_backup.tar.gz -C ${{ env.APP_DIR }}/data postgres
            echo '✅ Postgres data preservado'
          fi
        "

    - name: 🐳 Instalar Docker e Docker Compose
      run: |
        echo "🐳 Garantindo Docker e Docker Compose..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Criar diretório se não existir
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}
          
          # Instalar Docker se não estiver instalado
          if ! command -v docker >/dev/null 2>&1; then
            echo '📦 Instalando Docker...'
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl enable docker
            systemctl start docker
            echo '✅ Docker instalado'
          else
            echo '✅ Docker já instalado'
            docker --version
          fi
          
          # Instalar Docker Compose standalone se não estiver disponível
          if ! command -v 'docker compose' >/dev/null 2>&1 && ! command -v 'docker-compose' >/dev/null 2>&1; then
            echo '📦 Instalando Docker Compose standalone...'
            COMPOSE_VERSION=\$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'\"' -f4)
            curl -L \"https://github.com/docker/compose/releases/download/\${COMPOSE_VERSION}/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            echo '✅ Docker Compose standalone instalado'
            docker-compose --version
          else
            echo '✅ Docker Compose já disponível'
            if command -v 'docker compose' >/dev/null 2>&1; then
              docker compose version
            else
              docker-compose --version
            fi
          fi
        "

    - name: 🚀 Deploy usando Script de Produção
      run: |
        echo "🚀 Executando deploy com script de produção..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Garantir que o diretório existe
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}
          
          # Clonar ou atualizar o repositório primeiro
          if [ ! -d .git ]; then
            echo '🆕 Clonando repositório...'
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo '📥 Atualizando repositório...'
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Deploy SocialBiblia + Supabase
          echo '🚀 Executando deploy SocialBiblia + Supabase...'
          
          # Build do frontend primeiro
          echo '📦 Building frontend...'
          cd apps/web
          npm ci --only=production
          npm run build
          
          # Deploy do frontend no nginx
          echo '🚀 Deploying frontend to nginx...'
          docker rm -f nginx-socialbiblia 2>/dev/null || true
          docker run -d --name nginx-socialbiblia -p 3000:80 -v "$(pwd)/dist:/usr/share/nginx/html:ro" nginx:alpine
          echo '✅ Frontend deployed to nginx'
          
          cd ../..
          
          # Navegar para Supabase
          cd supabase
          
          # Detectar comando Docker Compose
          if command -v 'docker compose' >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD='docker compose'
          elif command -v 'docker-compose' >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD='docker-compose'
          else
            echo '❌ Docker Compose não encontrado!'
            exit 1
          fi
          
          # Verificar se docker-compose.yml existe
          if [ ! -f docker-compose.yml ]; then
            echo '❌ docker-compose.yml não encontrado em supabase/!'
            echo '📁 Arquivos no diretório supabase:'
            ls -la
            exit 1
          fi
          
          # Parar containers existentes
          echo '🔄 Parando containers existentes...'
          \$DOCKER_COMPOSE_CMD down || true
          
          # Limpar imagens antigas se necessário
          if [[ '${{ needs.analyze-changes.outputs.has_package_changes }}' == 'true' ]]; then
            echo '🧹 Limpando imagens antigas (dependências mudaram)...'
            \$DOCKER_COMPOSE_CMD down --rmi all || true
          fi
          
          # Iniciar aplicação
          echo '🚀 Iniciando aplicação...'
          \$DOCKER_COMPOSE_CMD up -d --build
          
          # Aguardar inicialização
          echo '⏳ Aguardando inicialização...'
          sleep 60
          
          echo '✅ Deploy concluído'
        "


    - name: 🔍 Verificação Rápida
      run: |
        echo "🔍 Verificação final..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}/supabase
          
          # Detectar comando Docker Compose
          if command -v 'docker compose' >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD='docker compose'
          elif command -v 'docker-compose' >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD='docker-compose'
          else
            echo '❌ Docker Compose não encontrado!'
            exit 1
          fi
          
          # Verificar Docker containers
          echo '🔍 Status dos containers:'
          \$DOCKER_COMPOSE_CMD ps || echo 'Erro ao verificar containers'
          
          if \$DOCKER_COMPOSE_CMD ps | grep -q 'Up'; then
            echo '✅ Docker containers rodando'
          else
            echo '⚠️ Containers podem estar iniciando ainda...'
            echo '🔍 Aguardando mais 30s...'
            sleep 30
            \$DOCKER_COMPOSE_CMD ps
            if \$DOCKER_COMPOSE_CMD ps | grep -q 'Up'; then
              echo '✅ Containers funcionando após aguardar'
            else
              echo '❌ Containers ainda não estão funcionando - verificar logs'
              \$DOCKER_COMPOSE_CMD logs --tail 20
              exit 1
            fi
          fi
          
          # Verificar health check rápido
          for i in {1..3}; do
            if curl -f -s http://localhost:3001/health >/dev/null 2>&1; then
              echo '✅ Health check OK'
              break
            else
              echo \"⏳ Tentativa \$i/3...\"
              sleep 5
            fi
            
            if [ \$i -eq 3 ]; then
              echo '⚠️ Health check demorou, mas containers estão rodando'
            fi
          done
        "

    - name: 📊 Relatório do Deploy Incremental
      if: always()
      run: |
        echo "📊 RELATÓRIO DO DEPLOY INCREMENTAL"
        echo "=================================="
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}'
          echo 'Restart Executado: ${{ needs.analyze-changes.outputs.needs_restart }}'
          echo 'Dependências Atualizadas: ${{ needs.analyze-changes.outputs.has_package_changes }}'
          echo ''
          
          echo '=== Status da Aplicação Supabase ==='
          cd ${{ env.APP_DIR }}/supabase
          
          # Detectar comando Docker Compose
          if command -v 'docker compose' >/dev/null 2>&1; then
            docker compose ps --no-trunc || echo 'Docker Compose não encontrado'
          elif command -v 'docker-compose' >/dev/null 2>&1; then
            docker-compose ps --no-trunc || echo 'Docker Compose não encontrado'
          else
            echo 'Docker Compose não encontrado!'
          fi
          
          echo ''
          echo '=== Volumes Supabase Preservados ==='
          docker volume ls | grep socialbiblia || echo 'Nenhum volume encontrado'
          
          echo ''
          echo '=== Último Commit ==='
          cd ${{ env.APP_DIR }} && git log --oneline -1
          
          echo ''
          echo '🎯 Frontend: http://${{ env.VPS_HOST }}:3000'
          echo '🎯 Supabase API: http://${{ env.VPS_HOST }}:3001'
          echo '🎯 PostgreSQL: http://${{ env.VPS_HOST }}:5433'
          echo '⚡ Deploy incremental Supabase concluído!'
        "

    - name: 🎉 Deploy Incremental Concluído
      run: |
        echo "🎉 DEPLOY INCREMENTAL SUPABASE REALIZADO COM SUCESSO!"
        echo "⚡ Tipo: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "🛡️ Dados preservados: SIM"
        echo "🚀 Frontend: http://${{ env.VPS_HOST }}:3000"
        echo "🚀 Supabase API: http://${{ env.VPS_HOST }}:3001"