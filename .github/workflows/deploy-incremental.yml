name: üöÄ Deploy Incremental SocialBiblia

# Controle de concorr√™ncia - √öNICO deploy por vez
concurrency:
  group: socialbiblia-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/src/**'
      - 'apps/web/src/**'
      - 'apps/backend/package*.json'
      - 'apps/web/package*.json'
      - 'package*.json'
      - 'docker-compose.yml'
      - 'docker-compose.new.yml'
      - '.github/workflows/deploy-incremental.yml'
  workflow_dispatch:

env:
  VPS_HOST: '31.97.85.98'
  VPS_USER: 'root'
  APP_DIR: '/opt/biblicai'
  COMPOSE_PROJECT_NAME: 'socialbiblia'

jobs:
  analyze-changes:
    name: üîç Analisar Mudan√ßas
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
      has_package_changes: ${{ steps.changes.outputs.has_package_changes }}
      has_config_changes: ${{ steps.changes.outputs.has_config_changes }}
      needs_restart: ${{ steps.changes.outputs.needs_restart }}
      deploy_type: ${{ steps.changes.outputs.deploy_type }}
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: üîç Analisar arquivos alterados
      id: changes
      run: |
        echo "üîç Analisando mudan√ßas desde o √∫ltimo commit..."
        
        # Obter arquivos alterados
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all")
        echo "üìÅ Arquivos alterados:"
        echo "$CHANGED_FILES"
        
        # Inicializar flags
        HAS_CODE=false
        HAS_PACKAGE=false
        HAS_CONFIG=false
        NEEDS_RESTART=false
        
        # Analisar tipos de mudan√ßas para SocialBiblia
        if echo "$CHANGED_FILES" | grep -E "(apps/backend/src/.*\.(js|ts|json)|apps/web/src/.*\.(js|ts|tsx|json))" > /dev/null; then
          HAS_CODE=true
          echo "‚úÖ Mudan√ßas de c√≥digo detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "package(-lock)?\.json" > /dev/null; then
          HAS_PACKAGE=true
          echo "üì¶ Mudan√ßas em depend√™ncias detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "(docker|prisma|\.env|nginx\.conf)" > /dev/null; then
          HAS_CONFIG=true
          echo "‚öôÔ∏è Mudan√ßas de configura√ß√£o detectadas"
        fi
        
        # Determinar se precisa restart
        if [[ "$HAS_CODE" == "true" || "$HAS_CONFIG" == "true" ]]; then
          NEEDS_RESTART=true
        fi
        
        # Determinar tipo de deploy
        if [[ "$HAS_PACKAGE" == "true" ]]; then
          DEPLOY_TYPE="full"
          echo "üîÑ Deploy completo necess√°rio (depend√™ncias mudaram)"
        elif [[ "$HAS_CODE" == "true" ]]; then
          DEPLOY_TYPE="code-only"
          echo "üìù Deploy apenas de c√≥digo"
        elif [[ "$HAS_CONFIG" == "true" ]]; then
          DEPLOY_TYPE="config-only"
          echo "‚öôÔ∏è Deploy apenas de configura√ß√£o"
        else
          DEPLOY_TYPE="minimal"
          echo "üìã Deploy m√≠nimo (docs/workflows)"
        fi
        
        # Definir outputs
        echo "has_code_changes=$HAS_CODE" >> $GITHUB_OUTPUT
        echo "has_package_changes=$HAS_PACKAGE" >> $GITHUB_OUTPUT
        echo "has_config_changes=$HAS_CONFIG" >> $GITHUB_OUTPUT
        echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
        echo "deploy_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy Incremental
    runs-on: ubuntu-latest
    needs: analyze-changes
    timeout-minutes: 15
    
    steps:
    - name: üìã Info do Deploy Incremental
      run: |
        echo "üöÄ Deploy Incremental SocialBiblia"
        echo "=============================================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "Mudan√ßas de C√≥digo: ${{ needs.analyze-changes.outputs.has_code_changes }}"
        echo "Mudan√ßas de Depend√™ncias: ${{ needs.analyze-changes.outputs.has_package_changes }}"
        echo "Precisa Restart: ${{ needs.analyze-changes.outputs.needs_restart }}"
        echo "=============================================="

    - name: üîë Configurar SSH
      run: |
        echo "üîë Configurando SSH para deploy incremental..."
        sudo apt-get update && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        echo "‚úÖ SSH configurado"

    - name: üîç Verificar estado atual da VPS
      run: |
        echo "üîç Verificando estado atual..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Estado Atual da VPS ==='
          echo 'Docker Containers:'
          docker ps --format 'table {{.Names}}\t{{.Status}}' | grep ${{ env.COMPOSE_PROJECT_NAME }} || echo 'N√£o rodando'
          
          echo ''
          echo 'Docker Compose status:'
          if [ -f ${{ env.APP_DIR }}/docker-compose.yml ]; then
            cd ${{ env.APP_DIR }} && docker-compose ps || echo 'Docker Compose n√£o encontrado'
          else
            echo 'üìã Docker Compose n√£o configurado'
          fi
          
          echo ''
          echo '√öltima atualiza√ß√£o:'
          cd ${{ env.APP_DIR }} && git log --oneline -1 2>/dev/null || echo 'Reposit√≥rio n√£o inicializado'
        "

    - name: üì¶ Backup Inteligente (somente se necess√°rio)
      if: needs.analyze-changes.outputs.deploy_type == 'full'
      run: |
        echo "üì¶ Fazendo backup completo (deploy full)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR=/opt/socialbiblia-backups/backup_\$TIMESTAMP
          mkdir -p \$BACKUP_DIR
          
          # Backup cr√≠tico - volumes do Docker
          if [ -d ${{ env.APP_DIR }}/data ]; then
            cp -r ${{ env.APP_DIR }}/data \$BACKUP_DIR/
            echo '‚úÖ Data volumes backed up'
          fi
          
          # Backup da configura√ß√£o atual
          if [ -f ${{ env.APP_DIR }}/.env.production ]; then
            cp ${{ env.APP_DIR }}/.env.production \$BACKUP_DIR/
            echo '‚úÖ Production env backed up'
          fi
          
          echo \"üì¶ Backup completo criado: \$BACKUP_DIR\"
        "

    - name: üì¶ Backup R√°pido (somente dados cr√≠ticos)
      if: needs.analyze-changes.outputs.deploy_type != 'full'
      run: |
        echo "üì¶ Backup r√°pido (apenas dados cr√≠ticos)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          if [ -f ${{ env.APP_DIR }}/.env.production ]; then
            cp ${{ env.APP_DIR }}/.env.production /tmp/env_backup.production
            echo '‚úÖ Environment preservado'
          fi
          
          # Backup dos volumes do banco se existir
          if [ -d ${{ env.APP_DIR }}/data/postgres ]; then
            tar -czf /tmp/postgres_backup.tar.gz -C ${{ env.APP_DIR }}/data postgres
            echo '‚úÖ Postgres data preservado'
          fi
        "

    - name: üîÑ Atualiza√ß√£o Incremental do C√≥digo
      run: |
        echo "üîÑ Atualizando c√≥digo via git pull incremental..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Verificar se reposit√≥rio existe
          if [ ! -d .git ]; then
            echo 'üÜï Primeira vez: clonando reposit√≥rio...'
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo 'üì• Fazendo pull incremental das mudan√ßas...'
            
            # Salvar status atual
            git stash push -m 'Auto-stash before deploy' 2>/dev/null || true
            
            # Pull incremental
            git fetch origin
            BEFORE=\$(git rev-parse HEAD)
            git pull origin main
            AFTER=\$(git rev-parse HEAD)
            
            if [ \"\$BEFORE\" != \"\$AFTER\" ]; then
              echo \"‚úÖ C√≥digo atualizado: \$BEFORE -> \$AFTER\"
            else
              echo 'üìã C√≥digo j√° atualizado'
            fi
          fi
        "

    - name: üîÑ Restaurar Dados Preservados
      run: |
        echo "üîÑ Garantindo preserva√ß√£o dos dados..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Restaurar .env.production se foi perdido no git pull
          if [ ! -f .env.production ] && [ -f /tmp/env_backup.production ]; then
            cp /tmp/env_backup.production .env.production
            echo '‚úÖ .env.production restaurado do backup r√°pido'
          elif [ -f .env.production ]; then
            echo '‚úÖ .env.production j√° presente'
          fi
          
          # Restaurar dados do Postgres se necess√°rio
          if [ -f /tmp/postgres_backup.tar.gz ] && [ ! -d data/postgres ]; then
            mkdir -p data
            tar -xzf /tmp/postgres_backup.tar.gz -C data/
            echo '‚úÖ Postgres data restaurado'
          fi
          
          # Verificar se backup completo existe e restaurar se necess√°rio
          LATEST_BACKUP=\$(ls -t /opt/socialbiblia-backups/backup_* 2>/dev/null | head -1 || echo '')
          if [ ! -f .env.production ] && [ -n \"\$LATEST_BACKUP\" ] && [ -f \"\$LATEST_BACKUP/.env.production\" ]; then
            cp \"\$LATEST_BACKUP/.env.production\" .env.production
            echo '‚úÖ .env.production restaurado do backup completo'
          fi
          
          echo 'üõ°Ô∏è Dados cr√≠ticos preservados'
        "

    - name: üì¶ Instalar Depend√™ncias (somente se necess√°rio)
      if: needs.analyze-changes.outputs.has_package_changes == 'true'
      run: |
        echo "üì¶ Instalando depend√™ncias (package.json mudou)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Build das imagens Docker com cache
          echo 'üî® Rebuilding Docker images...'
          docker-compose -f docker-compose.yml build --no-cache
          echo '‚úÖ Depend√™ncias atualizadas via Docker build'
        "

    - name: üì¶ Skip Depend√™ncias (n√£o necess√°rio)
      if: needs.analyze-changes.outputs.has_package_changes == 'false'
      run: |
        echo "üì¶ Pulando instala√ß√£o de depend√™ncias (package.json n√£o mudou)"
        echo "‚ö° Deploy mais r√°pido!"

    - name: üîÑ Restart Inteligente da Aplica√ß√£o
      if: needs.analyze-changes.outputs.needs_restart == 'true'
      run: |
        echo "üîÑ Reiniciando aplica√ß√£o (c√≥digo/config mudou)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Verificar se Docker Compose est√° rodando
          if docker-compose ps | grep -q 'Up'; then
            echo 'üîÑ Fazendo restart dos containers (preserva dados)...'
            docker-compose restart
          else
            echo 'üöÄ Iniciando aplica√ß√£o com Docker Compose...'
            docker-compose up -d
          fi
          
          echo '‚úÖ Aplica√ß√£o atualizada via Docker'
        "

    - name: üìã Skip Restart (n√£o necess√°rio)
      if: needs.analyze-changes.outputs.needs_restart == 'false'
      run: |
        echo "üìã Restart n√£o necess√°rio (apenas docs/workflows mudaram)"
        echo "‚ö° Aplica√ß√£o continua rodando sem interrup√ß√£o!"

    - name: ‚è≥ Aguardar Estabiliza√ß√£o
      if: needs.analyze-changes.outputs.needs_restart == 'true'
      run: |
        echo "‚è≥ Aguardando aplica√ß√£o estabilizar ap√≥s restart..."
        sleep 10

    - name: üîç Verifica√ß√£o R√°pida
      run: |
        echo "üîç Verifica√ß√£o final..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Verificar Docker containers
          if docker-compose ps | grep -q 'Up'; then
            echo '‚úÖ Docker containers rodando'
          else
            echo '‚ùå Docker containers n√£o encontrados'
            exit 1
          fi
          
          # Verificar health check r√°pido
          for i in {1..3}; do
            if curl -f -s http://localhost:3000/api/health >/dev/null 2>&1; then
              echo '‚úÖ Health check OK'
              break
            else
              echo \"‚è≥ Tentativa \$i/3...\"
              sleep 5
            fi
            
            if [ \$i -eq 3 ]; then
              echo '‚ö†Ô∏è Health check demorou, mas containers est√£o rodando'
            fi
          done
        "

    - name: üìä Relat√≥rio do Deploy Incremental
      if: always()
      run: |
        echo "üìä RELAT√ìRIO DO DEPLOY INCREMENTAL"
        echo "=================================="
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}'
          echo 'Restart Executado: ${{ needs.analyze-changes.outputs.needs_restart }}'
          echo 'Depend√™ncias Atualizadas: ${{ needs.analyze-changes.outputs.has_package_changes }}'
          echo ''
          
          echo '=== Status da Aplica√ß√£o ==='
          cd ${{ env.APP_DIR }}
          docker-compose ps --no-trunc || echo 'Docker Compose n√£o encontrado'
          
          echo ''
          echo '=== Volumes Docker Preservados ==='
          docker volume ls | grep ${{ env.COMPOSE_PROJECT_NAME }} || echo 'Nenhum volume encontrado'
          
          echo ''
          echo '=== √öltimo Commit ==='
          cd ${{ env.APP_DIR }} && git log --oneline -1
          
          echo ''
          echo 'üéØ Frontend: http://${{ env.VPS_HOST }}:3000'
          echo 'üéØ Backend API: http://${{ env.VPS_HOST }}:3001/api'
          echo 'üéØ Swagger Docs: http://${{ env.VPS_HOST }}:3001/api/docs'
          echo '‚ö° Deploy incremental conclu√≠do!'
        "

    - name: üéâ Deploy Incremental Conclu√≠do
      run: |
        echo "üéâ DEPLOY INCREMENTAL REALIZADO COM SUCESSO!"
        echo "‚ö° Tipo: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "üõ°Ô∏è Dados preservados: SIM"
        echo "üöÄ Frontend: http://${{ env.VPS_HOST }}:3000"
        echo "üöÄ Backend API: http://${{ env.VPS_HOST }}:3001/api"