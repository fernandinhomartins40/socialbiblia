#!/bin/bash

# ==============================================
# SCRIPT DE TESTE COMPLETO - SOCIALBIBLIA WSL UBUNTU
# Testa 100% da aplica√ß√£o para identificar erros de deploy
# ==============================================

set -e  # Para na primeira falha

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Contador de testes
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

test_start() {
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    log "üß™ TESTE $TESTS_TOTAL: $1"
}

test_pass() {
    TESTS_PASSED=$((TESTS_PASSED + 1))
    success "‚úÖ $1"
}

test_fail() {
    TESTS_FAILED=$((TESTS_FAILED + 1))
    error "‚ùå $1"
}

# ==============================================
# 1. VERIFICA√á√ÉO DO AMBIENTE WSL
# ==============================================

log "üêß Verificando ambiente WSL Ubuntu..."

test_start "Verifica√ß√£o do Sistema Operacional"
if grep -q "Ubuntu" /etc/os-release; then
    test_pass "Ubuntu detectado"
    cat /etc/os-release | grep -E "(NAME|VERSION)"
else
    test_fail "Ubuntu n√£o detectado"
    exit 1
fi

test_start "Verifica√ß√£o de Depend√™ncias do Sistema"
DEPS_MISSING=""

# Node.js
if ! command -v node &> /dev/null; then
    DEPS_MISSING="$DEPS_MISSING node"
fi

# npm
if ! command -v npm &> /dev/null; then
    DEPS_MISSING="$DEPS_MISSING npm"
fi

# Docker
if ! command -v docker &> /dev/null; then
    DEPS_MISSING="$DEPS_MISSING docker"
fi

# curl
if ! command -v curl &> /dev/null; then
    DEPS_MISSING="$DEPS_MISSING curl"
fi

if [ -z "$DEPS_MISSING" ]; then
    test_pass "Todas as depend√™ncias est√£o instaladas"
else
    warning "Depend√™ncias faltando: $DEPS_MISSING"
    log "Instalando depend√™ncias faltando..."
    
    # Atualizar reposit√≥rios
    sudo apt update
    
    # Instalar Node.js se necess√°rio
    if [[ $DEPS_MISSING == *"node"* ]] || [[ $DEPS_MISSING == *"npm"* ]]; then
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
    fi
    
    # Instalar Docker se necess√°rio
    if [[ $DEPS_MISSING == *"docker"* ]]; then
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
    fi
    
    # Instalar curl se necess√°rio
    if [[ $DEPS_MISSING == *"curl"* ]]; then
        sudo apt-get install -y curl
    fi
    
    test_pass "Depend√™ncias instaladas"
fi

# Verificar vers√µes
log "üìã Vers√µes das depend√™ncias:"
node --version 2>/dev/null && echo "Node.js: $(node --version)" || echo "Node.js: n√£o instalado"
npm --version 2>/dev/null && echo "npm: $(npm --version)" || echo "npm: n√£o instalado"
docker --version 2>/dev/null && echo "Docker: $(docker --version)" || echo "Docker: n√£o instalado"

# ==============================================
# 2. TESTES DO BACKEND
# ==============================================

log "üöÄ Iniciando testes do backend..."

cd apps/backend

test_start "Instala√ß√£o de depend√™ncias do backend"
if npm ci; then
    test_pass "Depend√™ncias do backend instaladas"
else
    test_fail "Falha na instala√ß√£o das depend√™ncias do backend"
    exit 1
fi

test_start "TypeScript - Verifica√ß√£o de tipos"
if npm run typecheck; then
    test_pass "TypeScript sem erros de tipo"
else
    test_fail "Erros de TypeScript encontrados"
fi

test_start "ESLint - An√°lise de c√≥digo"
if npm run lint; then
    test_pass "ESLint passou sem problemas"
else
    warning "ESLint encontrou problemas (n√£o cr√≠tico)"
fi

test_start "Gera√ß√£o do Prisma Client"
if npm run prisma:generate; then
    test_pass "Prisma Client gerado com sucesso"
else
    test_fail "Falha na gera√ß√£o do Prisma Client"
fi

test_start "Reset do banco de dados para testes"
if npm run prisma:reset:force; then
    test_pass "Banco de dados resetado"
else
    test_fail "Falha no reset do banco de dados"
fi

test_start "Aplica√ß√£o de migra√ß√µes"
if npm run prisma:migrate:deploy; then
    test_pass "Migra√ß√µes aplicadas com sucesso"
else
    test_fail "Falha na aplica√ß√£o das migra√ß√µes"
fi

test_start "Execu√ß√£o do seed"
if npm run prisma:seed; then
    test_pass "Seed executado com sucesso"
else
    test_fail "Falha na execu√ß√£o do seed"
fi

test_start "Testes unit√°rios do backend"
if npm test; then
    test_pass "Todos os testes unit√°rios passaram"
else
    test_fail "Alguns testes unit√°rios falharam"
fi

test_start "Build do backend"
if npm run build; then
    test_pass "Build do backend conclu√≠do"
else
    test_fail "Falha no build do backend"
fi

test_start "Teste de inicializa√ß√£o do servidor (10s)"
timeout 10s npm start &
SERVER_PID=$!
sleep 5

if curl -f http://localhost:3000/api/info 2>/dev/null; then
    test_pass "Servidor iniciou e responde corretamente"
    kill $SERVER_PID 2>/dev/null || true
else
    test_fail "Servidor n√£o responde ou falha na inicializa√ß√£o"
    kill $SERVER_PID 2>/dev/null || true
fi

# ==============================================
# 3. TESTES DO FRONTEND
# ==============================================

log "üåê Iniciando testes do frontend..."

cd ../web

test_start "Instala√ß√£o de depend√™ncias do frontend"
if npm ci; then
    test_pass "Depend√™ncias do frontend instaladas"
else
    test_fail "Falha na instala√ß√£o das depend√™ncias do frontend"
    exit 1
fi

test_start "TypeScript - Verifica√ß√£o de tipos (frontend)"
if npm run typecheck; then
    test_pass "TypeScript frontend sem erros"
else
    test_fail "Erros de TypeScript no frontend"
fi

test_start "ESLint - An√°lise de c√≥digo (frontend)"
if npm run lint; then
    test_pass "ESLint frontend passou"
else
    warning "ESLint frontend encontrou problemas (n√£o cr√≠tico)"
fi

test_start "Build do frontend"
if npm run build; then
    test_pass "Build do frontend conclu√≠do"
else
    test_fail "Falha no build do frontend"
fi

test_start "Preview do frontend (10s)"
timeout 10s npm run preview &
PREVIEW_PID=$!
sleep 5

if curl -f http://localhost:4173 2>/dev/null; then
    test_pass "Frontend preview funcionando"
    kill $PREVIEW_PID 2>/dev/null || true
else
    test_fail "Frontend preview n√£o funciona"
    kill $PREVIEW_PID 2>/dev/null || true
fi

# ==============================================
# 4. TESTES DOCKER
# ==============================================

log "üê≥ Iniciando testes Docker..."

cd ../../

test_start "Verifica√ß√£o de arquivos Docker"
DOCKER_FILES=(
    "docker-compose.new.yml"
    "configs/docker/Dockerfile.backend"
    "configs/docker/Dockerfile.web"
    "configs/docker/nginx.conf"
    "configs/docker/default.conf"
)

for file in "${DOCKER_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "‚úì $file existe"
    else
        error "‚úó $file n√£o encontrado"
        test_fail "Arquivo Docker faltando: $file"
    fi
done

test_start "Valida√ß√£o do docker-compose.new.yml"
if docker compose -f docker-compose.new.yml config 2>/dev/null; then
    test_pass "docker-compose.new.yml √© v√°lido"
else
    test_fail "docker-compose.new.yml cont√©m erros"
fi

test_start "Build das imagens Docker"
if docker compose -f docker-compose.new.yml build; then
    test_pass "Imagens Docker constru√≠das com sucesso"
else
    test_fail "Falha na constru√ß√£o das imagens Docker"
fi

test_start "Execu√ß√£o dos containers (30s)"
docker compose -f docker-compose.new.yml up -d

# Aguardar containers iniciarem
sleep 30

# Verificar se os containers est√£o rodando
if docker compose -f docker-compose.new.yml ps | grep -q "Up"; then
    test_pass "Containers est√£o executando"
    
    # Testar endpoints
    test_start "Teste de endpoints via Docker"
    
    # Testar API
    if curl -f http://localhost/api/info 2>/dev/null; then
        test_pass "API acess√≠vel via Docker"
    else
        test_fail "API n√£o acess√≠vel via Docker"
    fi
    
    # Testar Frontend
    if curl -f http://localhost/ 2>/dev/null; then
        test_pass "Frontend acess√≠vel via Docker"
    else
        test_fail "Frontend n√£o acess√≠vel via Docker"
    fi
    
else
    test_fail "Containers n√£o est√£o executando corretamente"
fi

# Parar containers
docker compose -f docker-compose.new.yml down

# ==============================================
# 5. TESTES DE STRESS E PERFORMANCE
# ==============================================

log "‚ö° Iniciando testes de performance..."

# Reiniciar apenas o backend para testes de stress
cd apps/backend
npm start &
BACKEND_PID=$!
sleep 5

test_start "Teste de stress - 100 requisi√ß√µes simult√¢neas"
if command -v ab &> /dev/null; then
    ab -n 100 -c 10 http://localhost:3000/api/info 2>/dev/null && test_pass "Teste de stress conclu√≠do" || test_fail "Teste de stress falhou"
else
    warning "Apache Bench (ab) n√£o instalado, pulando teste de stress"
fi

kill $BACKEND_PID 2>/dev/null || true

# ==============================================
# 6. AN√ÅLISE DE LOGS E PROBLEMAS
# ==============================================

log "üìä Analisando logs e problemas conhecidos..."

test_start "Verifica√ß√£o de problemas conhecidos"

# Verificar problemas de import @packagejson
if grep -r "@packagejson" apps/backend/src/ 2>/dev/null; then
    test_fail "Imports @packagejson encontrados (problema conhecido)"
    log "Problema: Imports @packagejson n√£o funcionam em runtime"
    log "Solu√ß√£o: Substituir por paths relativos"
else
    test_pass "Nenhum import @packagejson problem√°tico encontrado"
fi

# Verificar configura√ß√µes de porta
test_start "Verifica√ß√£o de consist√™ncia de portas"
BACKEND_CONFIG_PORT=$(grep -r "PORT.*3000" apps/backend/src/core/config.ts | wc -l)
DOCKER_PORT=$(grep -r "3000" docker-compose.new.yml | wc -l)

if [ "$BACKEND_CONFIG_PORT" -gt 0 ] && [ "$DOCKER_PORT" -gt 0 ]; then
    test_pass "Configura√ß√µes de porta consistentes (3000)"
else
    test_fail "Inconsist√™ncias de porta detectadas"
fi

# Verificar migra√ß√µes SQLite
test_start "Verifica√ß√£o de migra√ß√µes SQLite"
if ls apps/backend/prisma/migrations/*/migration.sql 2>/dev/null | xargs grep -l "TEXT\|DATETIME" > /dev/null; then
    test_pass "Migra√ß√µes usando sintaxe SQLite"
else
    test_fail "Migra√ß√µes podem ter sintaxe PostgreSQL incompat√≠vel"
fi

# ==============================================
# 7. RELAT√ìRIO FINAL
# ==============================================

log "üìà Gerando relat√≥rio final..."

echo ""
echo "======================================"
echo "   RELAT√ìRIO DE TESTES COMPLETO"
echo "======================================"
echo ""
echo "üìä Estat√≠sticas:"
echo "   Total de testes: $TESTS_TOTAL"
echo "   Testes passou: $TESTS_PASSED"
echo "   Testes falharam: $TESTS_FAILED"
echo "   Taxa de sucesso: $(( TESTS_PASSED * 100 / TESTS_TOTAL ))%"
echo ""

if [ $TESTS_FAILED -eq 0 ]; then
    success "üéâ TODOS OS TESTES PASSARAM! Aplica√ß√£o pronta para deploy."
    exit 0
else
    error "üö® $TESTS_FAILED TESTES FALHARAM. Verificar problemas acima."
    
    echo ""
    echo "üîß PR√ìXIMOS PASSOS RECOMENDADOS:"
    echo "1. Revisar logs de erro acima"
    echo "2. Corrigir problemas identificados"
    echo "3. Re-executar testes espec√≠ficos"
    echo "4. Testar deploy em ambiente staging"
    echo ""
    
    exit 1
fi 