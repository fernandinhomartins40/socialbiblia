#!/bin/bash
# Deploy Script para VPS Ubuntu 22.04 - Social B√≠blia
# Vincent Queimado Express + Prisma + TypeScript Backend

set -e  # Exit on any error

# Configura√ß√µes
PROJECT_NAME="socialbiblia"
DOCKER_COMPOSE_FILE="docker-compose.new.yml"
ENV_FILE=".env.production"

echo "üöÄ INICIANDO DEPLOY - SOCIAL B√çBLIA VPS"
echo "========================================"

# Verificar se Docker e Docker Compose est√£o instalados
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Instalando..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    sudo usermod -aG docker $USER
    echo "‚úÖ Docker instalado com sucesso"
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Instalando..."
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "‚úÖ Docker Compose instalado com sucesso"
fi

# Verificar recursos do sistema
echo "üìä VERIFICANDO RECURSOS DO SISTEMA:"
echo "RAM dispon√≠vel: $(free -h | awk '/Mem:/ {print $7}')"
echo "Espa√ßo em disco: $(df -h / | awk 'NR==2 {print $4}')"
echo "Load average: $(uptime | awk -F'load average:' '{print $2}')"
echo ""

# Parar containers existentes (se houver)
echo "üõë PARANDO CONTAINERS EXISTENTES..."
docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans 2>/dev/null || true

# Limpar recursos n√£o utilizados
echo "üßπ LIMPANDO RECURSOS DOCKER N√ÉO UTILIZADOS..."
docker system prune -f

# Verificar se o arquivo .env existe
if [ ! -f "$ENV_FILE" ]; then
    echo "‚ùå Arquivo $ENV_FILE n√£o encontrado!"
    exit 1
fi

# Copiar arquivo de environment
cp $ENV_FILE .env

# Build das imagens
echo "üèóÔ∏è  FAZENDO BUILD DAS IMAGENS..."
docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache --parallel

# Iniciar servi√ßos
echo "üöÄ INICIANDO SERVI√áOS..."
docker-compose -f $DOCKER_COMPOSE_FILE up -d

# Aguardar inicializa√ß√£o do PostgreSQL
echo "‚è≥ AGUARDANDO INICIALIZA√á√ÉO DO POSTGRESQL..."
timeout=60
counter=0
while ! docker-compose -f $DOCKER_COMPOSE_FILE exec -T postgres pg_isready -U socialbiblia_user -d socialbiblia_db; do
    sleep 1
    counter=$((counter+1))
    if [ $counter -ge $timeout ]; then
        echo "‚ùå PostgreSQL n√£o iniciou em $timeout segundos!"
        docker-compose -f $DOCKER_COMPOSE_FILE logs postgres
        exit 1
    fi
done

echo "‚úÖ PostgreSQL iniciado com sucesso!"

# Executar migra√ß√µes do Prisma
echo "üóÉÔ∏è  EXECUTANDO MIGRA√á√ïES DO BANCO DE DADOS..."
docker-compose -f $DOCKER_COMPOSE_FILE exec -T api npx prisma migrate deploy || {
    echo "‚ö†Ô∏è  Tentando reset das migra√ß√µes..."
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api npx prisma migrate reset --force
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api npx prisma migrate deploy
}

# Executar seed do banco (se necess√°rio)
echo "üå± EXECUTANDO SEED DO BANCO DE DADOS..."
docker-compose -f $DOCKER_COMPOSE_FILE exec -T api npm run prisma:seed || echo "‚ö†Ô∏è  Seed falhou ou j√° foi executado"

# Aguardar inicializa√ß√£o da API
echo "‚è≥ AGUARDANDO INICIALIZA√á√ÉO DA API..."
timeout=120
counter=0
while ! curl -f http://localhost:3344/api/info >/dev/null 2>&1; do
    sleep 1
    counter=$((counter+1))
    if [ $counter -ge $timeout ]; then
        echo "‚ùå API n√£o respondeu em $timeout segundos!"
        echo "üìã LOGS DA API:"
        docker-compose -f $DOCKER_COMPOSE_FILE logs api
        exit 1
    fi
    if [ $((counter % 10)) -eq 0 ]; then
        echo "Aguardando... $counter/$timeout segundos"
    fi
done

echo "‚úÖ API iniciada com sucesso!"

# Aguardar inicializa√ß√£o do Frontend
echo "‚è≥ AGUARDANDO INICIALIZA√á√ÉO DO FRONTEND..."
timeout=60
counter=0
while ! curl -f http://localhost:3000 >/dev/null 2>&1; do
    sleep 1
    counter=$((counter+1))
    if [ $counter -ge $timeout ]; then
        echo "‚ùå Frontend n√£o respondeu em $timeout segundos!"
        docker-compose -f $DOCKER_COMPOSE_FILE logs web
        exit 1
    fi
    if [ $((counter % 10)) -eq 0 ]; then
        echo "Aguardando... $counter/$timeout segundos"
    fi
done

echo "‚úÖ Frontend iniciado com sucesso!"

# Verificar status final
echo ""
echo "üìä STATUS FINAL DOS SERVI√áOS:"
docker-compose -f $DOCKER_COMPOSE_FILE ps

echo ""
echo "üîó ENDPOINTS DISPON√çVEIS:"
echo "- API Backend: http://localhost:3344/api/info"
echo "- Frontend: http://localhost:3000"
echo "- pgAdmin: http://localhost:8080"
echo "- Swagger Docs: http://localhost:3344/api/docs"
echo ""

# Teste final da API
echo "üß™ TESTANDO ENDPOINTS DA API..."
if curl -f http://localhost:3344/api/info >/dev/null 2>&1; then
    echo "‚úÖ Endpoint /api/info est√° funcionando"
else
    echo "‚ùå Endpoint /api/info n√£o est√° funcionando"
fi

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "========================================"
echo "A aplica√ß√£o Social B√≠blia est√° rodando na VPS"
echo "Backend: Vincent Queimado Express + Prisma + TypeScript"
echo "Database: PostgreSQL 15"
echo "Ambiente: Produ√ß√£o"
echo ""

# Mostrar informa√ß√µes sobre logs
echo "üìã PARA VER LOGS:"
echo "docker-compose -f $DOCKER_COMPOSE_FILE logs -f [servi√ßo]"
echo ""
echo "üîß PARA PARAR SERVI√áOS:"
echo "docker-compose -f $DOCKER_COMPOSE_FILE down"
echo ""