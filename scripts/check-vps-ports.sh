#!/bin/bash
# Script para verificar portas dispon√≠veis na VPS Ubuntu 22.04
# Social B√≠blia - Verifica√ß√£o de Portas antes do Deploy

set -e

echo "üîç VERIFICANDO PORTAS DISPON√çVEIS NA VPS"
echo "========================================"
echo "VPS: Ubuntu 22.04"
echo "Data: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Fun√ß√£o de log
log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

# Portas que a aplica√ß√£o precisa usar
REQUIRED_PORTS=(3000 3344 5432 8080 80 443)
OCCUPIED_PORTS=()
AVAILABLE_PORTS=()

log "üìã VERIFICANDO PORTAS NECESS√ÅRIAS PARA SOCIAL B√çBLIA:"
echo "   ‚Ä¢ 3000  - Frontend (React)"
echo "   ‚Ä¢ 3344  - Backend API (Vincent Queimado)"  
echo "   ‚Ä¢ 5432  - PostgreSQL Database"
echo "   ‚Ä¢ 8080  - pgAdmin"
echo "   ‚Ä¢ 80    - HTTP (Nginx)"
echo "   ‚Ä¢ 443   - HTTPS (Nginx)"
echo ""

# Verificar cada porta necess√°ria
log "üîç VERIFICANDO STATUS DAS PORTAS..."
for port in "${REQUIRED_PORTS[@]}"; do
    # Verificar se a porta est√° em uso
    if netstat -tulpn 2>/dev/null | grep -q ":$port "; then
        OCCUPIED_PORTS+=($port)
        SERVICE=$(netstat -tulpn 2>/dev/null | grep ":$port " | awk '{print $1 " " $7}' | head -1)
        echo "‚ùå Porta $port: OCUPADA ($SERVICE)"
    else
        AVAILABLE_PORTS+=($port)
        echo "‚úÖ Porta $port: DISPON√çVEL"
    fi
done

echo ""

# Mostrar resumo de portas ocupadas
if [ ${#OCCUPIED_PORTS[@]} -gt 0 ]; then
    log "‚ö†Ô∏è  PORTAS OCUPADAS ENCONTRADAS:"
    for port in "${OCCUPIED_PORTS[@]}"; do
        echo "   üî¥ Porta $port ocupada"
        # Mostrar qual processo est√° usando a porta
        PROCESS_INFO=$(netstat -tulpn 2>/dev/null | grep ":$port " | head -1)
        if [ ! -z "$PROCESS_INFO" ]; then
            PROCESS_ID=$(echo "$PROCESS_INFO" | awk '{print $7}' | cut -d'/' -f1)
            if [ "$PROCESS_ID" != "-" ] && [ ! -z "$PROCESS_ID" ]; then
                PROCESS_NAME=$(ps -p $PROCESS_ID -o comm= 2>/dev/null || echo "unknown")
                echo "      ‚îî‚îÄ Processo: $PROCESS_NAME (PID: $PROCESS_ID)"
            fi
        fi
    done
    echo ""
fi

# Mostrar resumo de portas dispon√≠veis
if [ ${#AVAILABLE_PORTS[@]} -gt 0 ]; then
    log "‚úÖ PORTAS DISPON√çVEIS:"
    for port in "${AVAILABLE_PORTS[@]}"; do
        echo "   üü¢ Porta $port dispon√≠vel"
    done
    echo ""
fi

# Verifica√ß√£o detalhada de servi√ßos web
log "üåê VERIFICANDO SERVI√áOS WEB EXISTENTES:"

# Verificar se Apache est√° rodando
if systemctl is-active --quiet apache2 2>/dev/null; then
    echo "   üî¥ Apache2: ATIVO (pode conflitar com porta 80)"
    echo "      ‚îî‚îÄ Para parar: sudo systemctl stop apache2"
elif command -v apache2 >/dev/null 2>&1; then
    echo "   üü° Apache2: INSTALADO mas INATIVO"  
else
    echo "   ‚úÖ Apache2: N√ÉO INSTALADO"
fi

# Verificar se Nginx est√° rodando
if systemctl is-active --quiet nginx 2>/dev/null; then
    echo "   üî¥ Nginx: ATIVO (pode conflitar com porta 80/443)"
    echo "      ‚îî‚îÄ Para parar: sudo systemctl stop nginx"
elif command -v nginx >/dev/null 2>&1; then
    echo "   üü° Nginx: INSTALADO mas INATIVO"
else
    echo "   ‚úÖ Nginx: N√ÉO INSTALADO"
fi

# Verificar se PostgreSQL est√° rodando
if systemctl is-active --quiet postgresql 2>/dev/null; then
    echo "   üî¥ PostgreSQL: ATIVO (pode conflitar com porta 5432)"
    echo "      ‚îî‚îÄ Para parar: sudo systemctl stop postgresql"
elif command -v postgres >/dev/null 2>&1 || command -v psql >/dev/null 2>&1; then
    echo "   üü° PostgreSQL: INSTALADO mas INATIVO"
else
    echo "   ‚úÖ PostgreSQL: N√ÉO INSTALADO"
fi

echo ""

# Verificar containers Docker em execu√ß√£o
log "üê≥ VERIFICANDO CONTAINERS DOCKER:"
if command -v docker >/dev/null 2>&1; then
    if docker ps -q >/dev/null 2>&1; then
        RUNNING_CONTAINERS=$(docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}")
        if [ $(docker ps -q | wc -l) -gt 0 ]; then
            echo "   üî¥ CONTAINERS EM EXECU√á√ÉO:"
            echo "$RUNNING_CONTAINERS"
            echo ""
            
            # Verificar especificamente containers com portas conflitantes
            CONFLICTING_CONTAINERS=$(docker ps --format "{{.Names}}\t{{.Ports}}" | grep -E "(3000|3344|5432|8080|80|443)" || true)
            if [ ! -z "$CONFLICTING_CONTAINERS" ]; then
                echo "   ‚ö†Ô∏è  CONTAINERS COM PORTAS CONFLITANTES:"
                echo "$CONFLICTING_CONTAINERS"
                echo ""
            fi
        else
            echo "   ‚úÖ Nenhum container em execu√ß√£o"
        fi
    else
        echo "   ‚ö†Ô∏è  Docker n√£o est√° rodando ou sem permiss√£o"
    fi
else
    echo "   ‚úÖ Docker n√£o instalado"
fi

echo ""

# Verifica√ß√£o de recursos do sistema
log "üíæ RECURSOS DO SISTEMA:"
echo "   Memory: $(free -h | grep '^Mem:' | awk '{print $3"/"$2" (used/total)"}')"
echo "   Disk: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
echo "   Load: $(uptime | sed 's/.*load average: //')"
echo ""

# Sugest√µes baseadas nos resultados
log "üí° SUGEST√ïES DE A√á√ÉO:"

if [ ${#OCCUPIED_PORTS[@]} -eq 0 ]; then
    echo "   üéâ TODAS AS PORTAS EST√ÉO DISPON√çVEIS!"
    echo "   ‚úÖ Voc√™ pode prosseguir com o deploy da Social B√≠blia"
else
    echo "   ‚ö†Ô∏è  PORTAS OCUPADAS DETECTADAS"
    echo "   üîß Op√ß√µes para resolver:"
    echo ""
    
    for port in "${OCCUPIED_PORTS[@]}"; do
        case $port in
            80|443)
                echo "   üåê Porta $port (HTTP/HTTPS):"
                echo "      ‚Ä¢ Parar Apache: sudo systemctl stop apache2"
                echo "      ‚Ä¢ Parar Nginx: sudo systemctl stop nginx"
                echo "      ‚Ä¢ Ou usar portas alternativas no docker-compose"
                ;;
            5432)
                echo "   üêò Porta $port (PostgreSQL):"
                echo "      ‚Ä¢ Parar PostgreSQL: sudo systemctl stop postgresql"
                echo "      ‚Ä¢ Ou usar porta alternativa (ex: 5433)"
                ;;
            3000)
                echo "   ‚öõÔ∏è  Porta $port (Frontend):"
                echo "      ‚Ä¢ Verificar se h√° aplica√ß√£o React/Node.js rodando"
                echo "      ‚Ä¢ Parar processo: sudo fuser -k 3000/tcp"
                echo "      ‚Ä¢ Ou usar porta alternativa (ex: 3001)"
                ;;
            3344)
                echo "   üîß Porta $port (Backend API):"
                echo "      ‚Ä¢ Verificar se h√° API rodando"
                echo "      ‚Ä¢ Parar processo: sudo fuser -k 3344/tcp"
                echo "      ‚Ä¢ Ou usar porta alternativa (ex: 4000)"
                ;;
            8080)
                echo "   üîß Porta $port (pgAdmin):"
                echo "      ‚Ä¢ Verificar aplica√ß√µes web alternativas"
                echo "      ‚Ä¢ Parar processo: sudo fuser -k 8080/tcp"
                echo "      ‚Ä¢ Ou usar porta alternativa (ex: 8081)"
                ;;
        esac
        echo ""
    done
fi

# Comandos √∫teis
log "üõ†Ô∏è  COMANDOS √öTEIS:"
echo "   ‚Ä¢ Verificar porta espec√≠fica: sudo netstat -tulpn | grep :3000"
echo "   ‚Ä¢ Matar processo na porta: sudo fuser -k 3000/tcp"
echo "   ‚Ä¢ Ver todos os servi√ßos ativos: sudo systemctl list-units --type=service --state=active"
echo "   ‚Ä¢ Parar todos containers Docker: docker stop \$(docker ps -q)"
echo "   ‚Ä¢ Ver logs do sistema: sudo journalctl -f"
echo ""

# Status final
if [ ${#OCCUPIED_PORTS[@]} -eq 0 ]; then
    log "üéâ STATUS: PRONTO PARA DEPLOY!"
    echo "   Todas as portas necess√°rias est√£o dispon√≠veis."
    exit 0
else
    log "‚ö†Ô∏è  STATUS: A√á√ÉO NECESS√ÅRIA"
    echo "   ${#OCCUPIED_PORTS[@]} porta(s) precisam ser liberadas antes do deploy."
    exit 1
fi