version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: socialbiblia_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-socialbiblia_db}
      POSTGRES_USER: ${POSTGRES_USER:-socialbiblia_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-socialbiblia_secure_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - socialbiblia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-socialbiblia_user} -d ${POSTGRES_DB:-socialbiblia_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      args:
        NODE_ENV: production
    container_name: socialbiblia_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://socialbiblia_user:socialbiblia_secure_password@postgres:5432/socialbiblia_db}
      APP_URL_HOST: 0.0.0.0
      APP_URL_PORT: 4000
      API_PREFIX: ${API_PREFIX:-api}
      API_VERSION: ${API_VERSION:-v1}
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-http://localhost:3000}
      JWT_SECRET_USER: ${JWT_SECRET_USER:-your-jwt-secret-user}
      JWT_SECRET_ADMIN: ${JWT_SECRET_ADMIN:-your-jwt-secret-admin}
      JWT_SECRET_APP: ${JWT_SECRET_APP:-your-jwt-secret-app}
      JWT_EXPIRED_IN: ${JWT_EXPIRED_IN:-24h}
      BCRYPT_SALTROUNDS: ${BCRYPT_SALTROUNDS:-10}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-1000}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
      DEBUG_HTTP_REQUEST: ${DEBUG_HTTP_REQUEST:-false}
      DEBUG_HTTP_CONNECTION: ${DEBUG_HTTP_CONNECTION:-false}
    ports:
      - "${API_PORT:-4000}:4000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - socialbiblia_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/api/info || curl -f http://localhost:4000/api || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Web
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        NODE_ENV: production
        VITE_API_URL: ${BACKEND_URL:-http://localhost:4000}
    container_name: socialbiblia_web
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - socialbiblia_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # pgAdmin (Administração do banco)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: socialbiblia_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@socialbiblia.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin_socialbiblia_2024}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - socialbiblia_network

  # Redis (Cache - opcional para futuras implementações)
  redis:
    image: redis:7-alpine
    container_name: socialbiblia_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - socialbiblia_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    name: socialbiblia_postgres_data
  pgadmin_data:
    name: socialbiblia_pgadmin_data
  redis_data:
    name: socialbiblia_redis_data
  api_logs:
    name: socialbiblia_api_logs
  api_uploads:
    name: socialbiblia_api_uploads

networks:
  socialbiblia_network:
    name: socialbiblia_network
    driver: bridge