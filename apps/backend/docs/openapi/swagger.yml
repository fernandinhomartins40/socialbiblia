openapi: 3.0.0
info:
  title: SocialBiblia API
  description: API RESTful para a plataforma SocialBiblia - Estudo b√≠blico colaborativo
  version: 1.0.0
  contact:
    name: SocialBiblia Team
    email: support@socialbiblia.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.socialbiblia.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user credentials
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        429:
          $ref: '#/components/responses/RateLimitError'

  /posts:
    get:
      tags:
        - Posts
      summary: List posts
      description: Get paginated list of posts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Posts
      summary: Create post
      description: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post
      description: Get a specific post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        404:
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Posts
      summary: Update post
      description: Update an existing post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        200:
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Posts
      summary: Delete post
      description: Delete a post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Post deleted successfully
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /storage/upload:
    post:
      tags:
        - Storage
      summary: Upload file
      description: Upload a file to storage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                folder:
                  type: string
      responses:
        201:
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        400:
          $ref: '#/components/responses/ValidationError'

  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard stats
      description: Get platform statistics for admin dashboard
      responses:
        200:
          description: Stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 2

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        createdAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 1
        content:
          type: string
          minLength: 1
        tags:
          type: array
          items:
            type: string

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        content:
          type: string
          minLength: 1
        tags:
          type: array
          items:
            type: string

    PostsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                $ref: '#/components/schemas/Post'
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer

    PostResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Post'

    FileUploadResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            fileId:
              type: string
            url:
              type: string
            filename:
              type: string
            size:
              type: integer

    DashboardStats:
      type: object
      properties:
        totalUsers:
          type: integer
        totalPosts:
          type: integer
        activeSessions:
          type: integer
        newUsersToday:
          type: integer
        newPostsToday:
          type: integer
        growthRate:
          type: number

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: VALIDATION_ERROR
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: AUTHENTICATION_ERROR
                  message:
                    type: string

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: FORBIDDEN_ERROR
                  message:
                    type: string

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_FOUND
                  message:
                    type: string

    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: CONFLICT_ERROR
                  message:
                    type: string

    RateLimitError:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: RATE_LIMIT_ERROR
                  message:
                    type: string

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_ERROR
                  message:
                    type: string
