generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("USER")
  isEmailVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relacionamentos
  posts     Post[]
  products  Product[]
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verification_tokens")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  status      String    @default("DRAFT")
  publishedAt DateTime?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  tags        String?   // JSON string com array de tags
  category    String?
  featured    Boolean   @default(false)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("posts")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryChildren", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryChildren")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("categories")
}

model Product {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  shortDescription  String?
  price             Float     @default(0)
  comparePrice      Float?
  costPrice         Float?
  sku               String?   @unique
  stock             Int       @default(0)
  minStock          Int       @default(0)
  weight            Float?
  dimensions        String?   // JSON string {width, height, depth}
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  userId            String    // Referência lógica para User
  user              User      @relation(fields: [userId], references: [id])
  brand             String?
  status            String    @default("DRAFT")
  featured          Boolean   @default(false)
  tags              String?   // JSON string com array de tags
  metaTitle         String?
  metaDescription   String?
  images            String?   // JSON string com array de URLs das imagens
  attributes        String    @default("{}")
  isDigital         Boolean   @default(false)
  requiresShipping  Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@map("products")
}


