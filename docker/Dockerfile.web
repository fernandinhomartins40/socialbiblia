# Dockerfile para Frontend Web em produção
FROM node:20-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache curl dumb-init

WORKDIR /app

# Stage 1: Dependencies
FROM base AS dependencies

# Copiar package files
COPY package*.json ./
COPY apps/web/package*.json ./apps/web/
COPY packages/shared/package*.json ./packages/shared/

# Build shared package
COPY packages/shared ./packages/shared
WORKDIR /app/packages/shared
RUN npm install --only=production && npm run build

# Install web dependencies
WORKDIR /app
COPY apps/web ./apps/web
WORKDIR /app/apps/web

# Substituir workspace:* por file:../..
RUN sed -i 's/"@socialbiblia\/shared": "workspace:\*"/"@socialbiblia\/shared": "file:..\/..\/packages\/shared"/g' package.json

RUN npm install

# Stage 2: Build
FROM dependencies AS builder

WORKDIR /app/apps/web

# Build da aplicação para produção
ARG VITE_API_URL=http://localhost:4000
ENV VITE_API_URL=${VITE_API_URL}

RUN npm run build

# Stage 3: Production with Nginx
FROM nginx:alpine AS production

# Copiar configuração customizada do nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/conf.d/default.conf

# Copiar arquivos buildados
COPY --from=builder /app/apps/web/dist /usr/share/nginx/html

# Criar usuário não-root (nginx já existe)
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx
RUN touch /var/run/nginx.pid && chown -R nginx:nginx /var/run/nginx.pid

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Usar usuário não-root
USER nginx

# Comando de inicialização
CMD ["nginx", "-g", "daemon off;"]