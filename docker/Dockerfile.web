# Dockerfile para Frontend Web em produção
FROM node:20-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache curl dumb-init

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração dos workspaces
COPY package*.json ./
COPY apps/web/package*.json ./apps/web/
COPY packages/shared/package*.json ./packages/shared/

# Stage 1: Build do shared package
FROM base AS shared-builder
WORKDIR /app

# Instalar dependências do shared
COPY packages/shared ./packages/shared
WORKDIR /app/packages/shared
RUN npm ci --only=production
RUN npm run build

# Stage 2: Build do Frontend
FROM base AS web-builder
WORKDIR /app

# Copiar shared package buildado
COPY --from=shared-builder /app/packages/shared ./packages/shared

# Instalar dependências do web
COPY apps/web ./apps/web
WORKDIR /app/apps/web

# Instalar dependências incluindo devDependencies para build
RUN npm ci

# Build da aplicação para produção
ARG VITE_API_URL=http://localhost:4000
ENV VITE_API_URL=${VITE_API_URL}

RUN npm run build

# Stage 3: Produção com Nginx
FROM nginx:alpine AS production

# Copiar configuração customizada do nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/conf.d/default.conf

# Copiar arquivos buildados
COPY --from=web-builder /app/apps/web/dist /usr/share/nginx/html

# Criar usuário não-root (nginx já existe)
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx
RUN touch /var/run/nginx.pid && chown -R nginx:nginx /var/run/nginx.pid

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Usar usuário não-root
USER nginx

# Comando de inicialização
CMD ["nginx", "-g", "daemon off;"]